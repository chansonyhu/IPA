# ----------------------------------------------------------------------
# This configuration file uses the Adjustable-Block Encoding CPA
# for predicate analysis with CEGAR as described in
# "Predicate Abstraction with Adjustable-Block Encoding" (Beyer et al.).
# It is configured to support ABE with LBE-like blocks
# (abstractions at loop heads and function entries/exists).
# ----------------------------------------------------------------------

#include predicateAnalysis-ABE.properties

# cpa.predicate.abstraction.computation = cartesian
# cpa.predicate.blk.threshold = 1

cpa.predicate.blk.alwaysAtFunctions = true
cpa.predicate.blk.alwaysAtLoops     = true
cpa.predicate.blk.alwaysAtBranch    = false
cpa.impacted.extractInitialPrec = false

# cpa.predicate.blk.alwaysAtJoin      = true
# cpa.predicate.blk.alwaysAtFunctionHeads = true
# cpa.predicate.blk.alwaysAtFunctionCallNodes = true
# cpa.predicate.blk.alwaysAndOnlyAtExplicitNodes = false



# cpa.predicate.abstraction.computation = cartesian

# CFACreator.java
parser.usePreprocessor = false
parser.readLineDirectives = true
analysis.useGlobalVars = true
cfa.useMultiEdges = false
cfa.removeIrrelevantForSpecification = false

cfa.transformIntoSingleLoop = false
cfa.simplifyCfa = true

cfa.moveDeclarationsToFunctionStart = false

# reduce output file
cfa.callgraph.export = false
cfa.exportPerFunction = false
cfa.export = false

# ARGStatistics.java
cpa.arg.export = false

# VariableClassificationBuilder.java
# cfa.variableClassification.logfile = null
# cfa.variableClassification.typeMapFile = null

# DOTBuilder.java
cfa.export.line_number = true

# InvariantsWriter.java
cpa.impacted.invariants.disjunction = true

cpa.impacted.invariants.export = true

# CPAchecker.java
# analysis.unknownAsTrue = false

# Enable precise handling of structs.
# cpa.predicate.handleFieldAccess = true

# ImpactedHelper.java
cpa.impacted.weaken.qe = false
cpa.impacted.diff.precise = true

# ImpactedDiffer.java


log.consoleLevel = SEVERE

# CmdLineArguments.java
analysis.summaryEdges = true
cpa.callstack.skipRecursion = true

# PredicateMapParser.java
cpa.predicate.abstraction.initialPredicates.applyFunctionWide = false
cpa.predicate.abstraction.initialPredicates.applyGlobally = false

cpa.predicate.precision.sharing = FUNCTION
analysis.traversal.order = BFS

cpa.impacted.diff.external = false
