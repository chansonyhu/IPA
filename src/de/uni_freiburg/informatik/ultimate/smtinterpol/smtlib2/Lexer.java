/* The following code was generated by JFlex 1.4.2 on 1/24/19 2:33 PM */

/*
 * Copyright (C) 2009-2012 University of Freiburg
 *
 * This file is part of SMTInterpol.
 *
 * SMTInterpol is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * SMTInterpol is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with SMTInterpol.  If not, see <http://www.gnu.org/licenses/>.
 */
/* SMT-Lib lexer */
package de.uni_freiburg.informatik.ultimate.smtinterpol.smtlib2;
import java.math.BigDecimal;
import java.math.BigInteger;
import com.github.jhoenicke.javacup.runtime.Symbol;
import de.uni_freiburg.informatik.ultimate.util.datastructures.UnifyHash;
import de.uni_freiburg.informatik.ultimate.smtinterpol.util.MySymbolFactory;

/**
 * This is a autogenerated lexer for the smtlib 2 script files.
 * It is generated from smtlib.flex by JFlex.
 */

public class Lexer implements com.github.jhoenicke.javacup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING25 = 4;
  public static final int YYINITIAL = 0;
  public static final int STRING20 = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\24\1\71"+
    "\1\12\3\5\1\0\1\21\1\22\2\5\1\0\1\35\1\11\1\5"+
    "\1\7\1\17\10\10\1\20\1\4\5\5\1\50\1\14\1\45\1\43"+
    "\1\44\1\14\1\65\1\5\1\46\2\5\1\51\1\47\1\60\3\5"+
    "\1\62\1\63\1\64\1\61\5\5\1\0\1\72\1\0\1\5\1\23"+
    "\1\0\1\25\1\16\1\32\1\42\1\27\1\53\1\54\1\33\1\40"+
    "\1\5\1\34\1\52\1\55\1\37\1\36\1\56\1\70\1\30\1\26"+
    "\1\31\1\41\1\57\1\67\1\13\1\66\1\5\1\0\1\15\1\0"+
    "\1\5\53\0\1\5\12\0\1\5\4\0\1\5\5\0\27\5\1\0"+
    "\37\5\1\0\u01ca\5\4\0\14\5\16\0\5\5\7\0\1\5\1\0"+
    "\1\5\201\0\5\5\1\0\2\5\2\0\4\5\10\0\1\5\1\0"+
    "\3\5\1\0\1\5\1\0\24\5\1\0\123\5\1\0\213\5\10\0"+
    "\236\5\11\0\46\5\2\0\1\5\7\0\47\5\110\0\33\5\5\0"+
    "\3\5\55\0\53\5\25\0\12\6\4\0\2\5\1\0\143\5\1\0"+
    "\1\5\17\0\2\5\7\0\2\5\12\6\3\5\2\0\1\5\20\0"+
    "\1\5\1\0\36\5\35\0\131\5\13\0\1\5\16\0\12\6\41\5"+
    "\11\0\2\5\4\0\1\5\5\0\26\5\4\0\1\5\11\0\1\5"+
    "\3\0\1\5\27\0\31\5\107\0\1\5\1\0\13\5\127\0\66\5"+
    "\3\0\1\5\22\0\1\5\7\0\12\5\4\0\12\6\1\0\7\5"+
    "\1\0\7\5\5\0\10\5\2\0\2\5\2\0\26\5\1\0\7\5"+
    "\1\0\1\5\3\0\4\5\3\0\1\5\20\0\1\5\15\0\2\5"+
    "\1\0\3\5\4\0\12\6\2\5\23\0\6\5\4\0\2\5\2\0"+
    "\26\5\1\0\7\5\1\0\2\5\1\0\2\5\1\0\2\5\37\0"+
    "\4\5\1\0\1\5\7\0\12\6\2\0\3\5\20\0\11\5\1\0"+
    "\3\5\1\0\26\5\1\0\7\5\1\0\2\5\1\0\5\5\3\0"+
    "\1\5\22\0\1\5\17\0\2\5\4\0\12\6\25\0\10\5\2\0"+
    "\2\5\2\0\26\5\1\0\7\5\1\0\2\5\1\0\5\5\3\0"+
    "\1\5\36\0\2\5\1\0\3\5\4\0\12\6\1\0\1\5\21\0"+
    "\1\5\1\0\6\5\3\0\3\5\1\0\4\5\3\0\2\5\1\0"+
    "\1\5\1\0\2\5\3\0\2\5\3\0\3\5\3\0\14\5\26\0"+
    "\1\5\25\0\12\6\25\0\10\5\1\0\3\5\1\0\27\5\1\0"+
    "\12\5\1\0\5\5\3\0\1\5\32\0\2\5\6\0\2\5\4\0"+
    "\12\6\25\0\10\5\1\0\3\5\1\0\27\5\1\0\12\5\1\0"+
    "\5\5\3\0\1\5\40\0\1\5\1\0\2\5\4\0\12\6\1\0"+
    "\2\5\22\0\10\5\1\0\3\5\1\0\51\5\2\0\1\5\20\0"+
    "\1\5\21\0\2\5\4\0\12\6\12\0\6\5\5\0\22\5\3\0"+
    "\30\5\1\0\11\5\1\0\1\5\2\0\7\5\72\0\60\5\1\0"+
    "\2\5\14\0\7\5\11\0\12\6\47\0\2\5\1\0\1\5\2\0"+
    "\2\5\1\0\1\5\2\0\1\5\6\0\4\5\1\0\7\5\1\0"+
    "\3\5\1\0\1\5\1\0\1\5\2\0\2\5\1\0\4\5\1\0"+
    "\2\5\11\0\1\5\2\0\5\5\1\0\1\5\11\0\12\6\2\0"+
    "\4\5\40\0\1\5\37\0\12\6\26\0\10\5\1\0\44\5\33\0"+
    "\5\5\163\0\53\5\24\0\1\5\12\6\6\0\6\5\4\0\4\5"+
    "\3\0\1\5\3\0\2\5\7\0\3\5\4\0\15\5\14\0\1\5"+
    "\1\0\12\6\6\0\46\5\1\0\1\5\5\0\1\5\2\0\53\5"+
    "\1\0\u014d\5\1\0\4\5\2\0\7\5\1\0\1\5\1\0\4\5"+
    "\2\0\51\5\1\0\4\5\2\0\41\5\1\0\4\5\2\0\7\5"+
    "\1\0\1\5\1\0\4\5\2\0\17\5\1\0\71\5\1\0\4\5"+
    "\2\0\103\5\45\0\20\5\20\0\125\5\14\0\u026c\5\2\0\21\5"+
    "\1\0\32\5\5\0\113\5\25\0\15\5\1\0\4\5\16\0\22\5"+
    "\16\0\22\5\16\0\15\5\1\0\3\5\17\0\64\5\43\0\1\5"+
    "\4\0\1\5\3\0\12\6\46\0\12\6\6\0\130\5\10\0\51\5"+
    "\1\0\1\5\5\0\106\5\12\0\35\5\51\0\12\6\36\5\2\0"+
    "\5\5\13\0\54\5\25\0\7\5\10\0\12\6\46\0\27\5\11\0"+
    "\65\5\53\0\12\6\6\0\12\6\15\0\1\5\135\0\57\5\21\0"+
    "\7\5\4\0\12\6\51\0\36\5\15\0\2\5\12\6\54\5\32\0"+
    "\44\5\34\0\12\6\3\0\3\5\12\6\44\5\153\0\4\5\1\0"+
    "\4\5\3\0\2\5\11\0\300\5\100\0\u0116\5\2\0\6\5\2\0"+
    "\46\5\2\0\6\5\2\0\10\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\37\5\2\0\65\5\1\0\7\5\1\0\1\5\3\0"+
    "\3\5\1\0\7\5\3\0\4\5\2\0\6\5\4\0\15\5\5\0"+
    "\3\5\1\0\7\5\164\0\1\5\15\0\1\5\20\0\15\5\145\0"+
    "\1\5\4\0\1\5\2\0\12\5\1\0\1\5\3\0\5\5\6\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\4\5\1\0\13\5\2\0"+
    "\4\5\5\0\5\5\4\0\1\5\64\0\2\5\u0a7b\0\57\5\1\0"+
    "\57\5\1\0\205\5\6\0\4\5\3\0\2\5\14\0\46\5\1\0"+
    "\1\5\5\0\1\5\2\0\70\5\7\0\1\5\20\0\27\5\11\0"+
    "\7\5\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5\1\0"+
    "\7\5\1\0\7\5\1\0\7\5\120\0\1\5\u01d5\0\2\5\52\0"+
    "\5\5\5\0\2\5\4\0\126\5\6\0\3\5\1\0\132\5\1\0"+
    "\4\5\5\0\51\5\3\0\136\5\21\0\33\5\65\0\20\5\u0200\0"+
    "\u19b6\5\112\0\u51cd\5\63\0\u048d\5\103\0\56\5\2\0\u010d\5\3\0"+
    "\20\5\12\6\2\5\24\0\57\5\20\0\31\5\10\0\106\5\61\0"+
    "\11\5\2\0\147\5\2\0\4\5\1\0\4\5\14\0\13\5\115\0"+
    "\12\5\1\0\3\5\1\0\4\5\1\0\27\5\35\0\64\5\16\0"+
    "\62\5\34\0\12\6\30\0\6\5\3\0\1\5\4\0\12\6\34\5"+
    "\12\0\27\5\31\0\35\5\7\0\57\5\34\0\1\5\12\6\46\0"+
    "\51\5\27\0\3\5\1\0\10\5\4\0\12\6\6\0\27\5\3\0"+
    "\1\5\5\0\60\5\1\0\1\5\3\0\2\5\2\0\5\5\2\0"+
    "\1\5\1\0\1\5\30\0\3\5\2\0\13\5\7\0\3\5\14\0"+
    "\6\5\2\0\6\5\2\0\6\5\11\0\7\5\1\0\7\5\221\0"+
    "\43\5\15\0\12\6\6\0\u2ba4\5\14\0\27\5\4\0\61\5\u2104\0"+
    "\u016e\5\2\0\152\5\46\0\7\5\14\0\5\5\5\0\1\5\1\0"+
    "\12\5\1\0\15\5\1\0\5\5\1\0\1\5\1\0\2\5\1\0"+
    "\2\5\1\0\154\5\41\0\u016b\5\22\0\100\5\2\0\66\5\50\0"+
    "\14\5\164\0\5\5\1\0\207\5\23\0\12\6\7\0\32\5\6\0"+
    "\32\5\13\0\131\5\3\0\6\5\2\0\6\5\2\0\6\5\2\0"+
    "\3\5\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\3\2\1\3\2\4\3\1\1\5\1\6"+
    "\1\7\1\10\22\3\1\11\1\12\1\13\1\14\1\12"+
    "\1\13\4\0\1\15\14\16\1\17\37\3\1\20\1\14"+
    "\1\21\1\22\1\23\1\24\22\16\1\3\1\25\24\3"+
    "\1\26\6\3\1\27\1\30\3\3\24\16\5\3\1\31"+
    "\1\3\1\32\1\3\1\33\4\3\1\34\17\3\1\35"+
    "\2\3\16\16\1\36\5\16\7\3\1\37\1\40\1\3"+
    "\1\41\5\3\1\42\5\3\1\43\1\44\14\3\1\16"+
    "\1\45\6\16\1\46\1\47\12\16\1\50\5\3\1\51"+
    "\1\3\1\52\12\3\1\53\10\3\1\54\1\3\1\55"+
    "\21\16\1\56\1\16\4\3\1\57\5\3\1\60\2\3"+
    "\1\61\2\3\1\62\11\3\1\63\7\16\1\64\6\16"+
    "\1\65\3\16\1\3\1\66\1\3\1\67\17\3\1\70"+
    "\4\3\6\16\1\71\4\16\1\72\4\16\1\3\1\73"+
    "\2\3\1\74\17\3\1\75\1\76\1\77\20\16\1\100"+
    "\1\101\4\3\1\102\6\3\1\103\3\3\1\104\2\3"+
    "\2\16\1\105\5\16\1\106\7\16\5\3\1\107\2\3"+
    "\1\110\1\111\6\3\3\16\1\112\12\16\1\3\1\113"+
    "\3\3\1\114\7\3\15\16\4\3\1\115\6\3\14\16"+
    "\1\116\3\3\1\117\1\3\1\120\1\121\2\3\1\122"+
    "\12\16\1\123\1\124\6\3\12\16\1\125\3\3\1\126"+
    "\1\3\4\16\1\127\2\16\1\130\2\16\4\3\1\131"+
    "\1\132\6\16\1\133\3\3\1\134\5\16\1\135\2\3"+
    "\3\16\1\136\1\137\2\3\3\16\1\140\1\141\3\16"+
    "\1\142\1\143\3\16\1\144";

  private static int [] zzUnpackAction() {
    int [] result = new int[667];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\261\0\u0127\0\u0162"+
    "\0\u019d\0\u01d8\0\u0213\0\u024e\0\u0289\0\261\0\261\0\u0162"+
    "\0\u0162\0\u02c4\0\u02ff\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426"+
    "\0\u0461\0\u049c\0\u04d7\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe"+
    "\0\u0639\0\u0674\0\u06af\0\261\0\u06ea\0\261\0\u0725\0\u0760"+
    "\0\u079b\0\u07d6\0\u0811\0\u084c\0\u024e\0\261\0\u0887\0\u08c2"+
    "\0\u08fd\0\u0938\0\u0973\0\u09ae\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a"+
    "\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72"+
    "\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a"+
    "\0\u0e85\0\u0ec0\0\u0efb\0\u0f36\0\u0f71\0\u0fac\0\u0fe7\0\u1022"+
    "\0\u105d\0\u1098\0\u10d3\0\u110e\0\u1149\0\u1184\0\u11bf\0\u11fa"+
    "\0\u1235\0\u1270\0\261\0\261\0\261\0\u07d6\0\u0811\0\u084c"+
    "\0\u12ab\0\u12e6\0\u1321\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448"+
    "\0\u1483\0\u14be\0\u14f9\0\u1534\0\u156f\0\u15aa\0\u15e5\0\u1620"+
    "\0\u165b\0\u1696\0\u16d1\0\u0162\0\u170c\0\u1747\0\u1782\0\u17bd"+
    "\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f\0\u195a\0\u1995"+
    "\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\u1abc\0\u1af7\0\u1b32\0\u1b6d"+
    "\0\u0162\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf\0\u0162"+
    "\0\u0162\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb\0\u1df6\0\u1e31\0\u1e6c"+
    "\0\u1ea7\0\u1ee2\0\u1f1d\0\u1f58\0\u1f93\0\u1fce\0\u2009\0\u2044"+
    "\0\u207f\0\u20ba\0\u20f5\0\u2130\0\u216b\0\u21a6\0\u21e1\0\u221c"+
    "\0\u2257\0\u2292\0\u22cd\0\u2308\0\u2343\0\u0162\0\u237e\0\u0162"+
    "\0\u23b9\0\u0162\0\u23f4\0\u242f\0\u246a\0\u24a5\0\u0162\0\u24e0"+
    "\0\u251b\0\u2556\0\u2591\0\u25cc\0\u2607\0\u2642\0\u267d\0\u26b8"+
    "\0\u26f3\0\u272e\0\u2769\0\u27a4\0\u27df\0\u281a\0\u0162\0\u2855"+
    "\0\u2890\0\u28cb\0\u2906\0\u2941\0\u297c\0\u29b7\0\u29f2\0\u2a2d"+
    "\0\u2a68\0\u2aa3\0\u2ade\0\u2b19\0\u2b54\0\u2b8f\0\u2bca\0\u2c05"+
    "\0\u2c40\0\u2c7b\0\u2cb6\0\u2cf1\0\u2d2c\0\u2d67\0\u2da2\0\u2ddd"+
    "\0\u2e18\0\u2e53\0\u2e8e\0\u2ec9\0\u0162\0\u2f04\0\u2f3f\0\u0162"+
    "\0\u2f7a\0\u2fb5\0\u2ff0\0\u302b\0\u3066\0\u0162\0\u30a1\0\u30dc"+
    "\0\u3117\0\u3152\0\u318d\0\u0162\0\u0162\0\u31c8\0\u3203\0\u323e"+
    "\0\u3279\0\u32b4\0\u32ef\0\u332a\0\u3365\0\u33a0\0\u33db\0\u3416"+
    "\0\u3451\0\u348c\0\u34c7\0\u3502\0\u353d\0\u3578\0\u35b3\0\u35ee"+
    "\0\u3629\0\u0887\0\u0887\0\u3664\0\u369f\0\u36da\0\u3715\0\u3750"+
    "\0\u378b\0\u37c6\0\u3801\0\u383c\0\u3877\0\u0162\0\u38b2\0\u38ed"+
    "\0\u3928\0\u3963\0\u399e\0\u0162\0\u39d9\0\u0162\0\u3a14\0\u3a4f"+
    "\0\u3a8a\0\u3ac5\0\u3b00\0\u3b3b\0\u3b76\0\u3bb1\0\u3bec\0\u3c27"+
    "\0\u0162\0\u3c62\0\u3c9d\0\u3cd8\0\u3d13\0\u3d4e\0\u3d89\0\u3dc4"+
    "\0\u3dff\0\u0162\0\u3e3a\0\u0162\0\u3e75\0\u3eb0\0\u3eeb\0\u3f26"+
    "\0\u3f61\0\u3f9c\0\u3fd7\0\u4012\0\u404d\0\u4088\0\u40c3\0\u40fe"+
    "\0\u4139\0\u4174\0\u41af\0\u41ea\0\u4225\0\u0887\0\u4260\0\u429b"+
    "\0\u42d6\0\u4311\0\u434c\0\u0162\0\u4387\0\u43c2\0\u43fd\0\u4438"+
    "\0\u4473\0\u0162\0\u44ae\0\u44e9\0\u0162\0\u4524\0\u455f\0\u0162"+
    "\0\u459a\0\u45d5\0\u4610\0\u464b\0\u4686\0\u46c1\0\u46fc\0\u4737"+
    "\0\u4772\0\u0162\0\u47ad\0\u47e8\0\u4823\0\u485e\0\u4899\0\u48d4"+
    "\0\u490f\0\u0887\0\u494a\0\u4985\0\u49c0\0\u49fb\0\u4a36\0\u4a71"+
    "\0\u0887\0\u4aac\0\u4ae7\0\u4b22\0\u4b5d\0\u0162\0\u4b98\0\u0162"+
    "\0\u4bd3\0\u4c0e\0\u4c49\0\u4c84\0\u4cbf\0\u4cfa\0\u4d35\0\u4d70"+
    "\0\u4dab\0\u4de6\0\u4e21\0\u4e5c\0\u4e97\0\u4ed2\0\u4f0d\0\u0162"+
    "\0\u4f48\0\u4f83\0\u4fbe\0\u4ff9\0\u5034\0\u506f\0\u50aa\0\u50e5"+
    "\0\u5120\0\u515b\0\u0887\0\u5196\0\u51d1\0\u520c\0\u5247\0\u0887"+
    "\0\u5282\0\u52bd\0\u52f8\0\u5333\0\u536e\0\u0162\0\u53a9\0\u53e4"+
    "\0\u541f\0\u545a\0\u5495\0\u54d0\0\u550b\0\u5546\0\u5581\0\u55bc"+
    "\0\u55f7\0\u5632\0\u566d\0\u56a8\0\u56e3\0\u571e\0\u5759\0\u5794"+
    "\0\u0162\0\u0162\0\u0162\0\u57cf\0\u580a\0\u5845\0\u5880\0\u58bb"+
    "\0\u58f6\0\u5931\0\u596c\0\u59a7\0\u59e2\0\u5a1d\0\u5a58\0\u5a93"+
    "\0\u5ace\0\u5b09\0\u5b44\0\u0887\0\u0162\0\u5b7f\0\u5bba\0\u5bf5"+
    "\0\u5c30\0\u0162\0\u5c6b\0\u5ca6\0\u5ce1\0\u5d1c\0\u5d57\0\u5d92"+
    "\0\u0162\0\u5dcd\0\u5e08\0\u5e43\0\u0162\0\u5e7e\0\u5eb9\0\u5ef4"+
    "\0\u5f2f\0\u0887\0\u5f6a\0\u5fa5\0\u5fe0\0\u601b\0\u6056\0\u0887"+
    "\0\u6091\0\u60cc\0\u6107\0\u6142\0\u617d\0\u61b8\0\u61f3\0\u622e"+
    "\0\u6269\0\u62a4\0\u62df\0\u631a\0\u0162\0\u6355\0\u6390\0\u0162"+
    "\0\u0162\0\u63cb\0\u6406\0\u6441\0\u647c\0\u64b7\0\u64f2\0\u652d"+
    "\0\u6568\0\u65a3\0\u0887\0\u65de\0\u6619\0\u6654\0\u668f\0\u66ca"+
    "\0\u6705\0\u6740\0\u677b\0\u67b6\0\u67f1\0\u682c\0\u0162\0\u6867"+
    "\0\u68a2\0\u68dd\0\u0162\0\u6918\0\u6953\0\u698e\0\u69c9\0\u6a04"+
    "\0\u6a3f\0\u6a7a\0\u6ab5\0\u6af0\0\u6b2b\0\u6b66\0\u6ba1\0\u6bdc"+
    "\0\u6c17\0\u6c52\0\u6c8d\0\u6cc8\0\u6d03\0\u6d3e\0\u6d79\0\u6db4"+
    "\0\u6def\0\u6e2a\0\u6e65\0\u0162\0\u6ea0\0\u6edb\0\u6f16\0\u6f51"+
    "\0\u6f8c\0\u6fc7\0\u7002\0\u703d\0\u7078\0\u70b3\0\u70ee\0\u7129"+
    "\0\u7164\0\u719f\0\u71da\0\u7215\0\u7250\0\u728b\0\u0887\0\u72c6"+
    "\0\u7301\0\u733c\0\u0162\0\u7377\0\u0162\0\u0162\0\u73b2\0\u73ed"+
    "\0\u0162\0\u7428\0\u7463\0\u749e\0\u74d9\0\u7514\0\u754f\0\u758a"+
    "\0\u75c5\0\u7600\0\u763b\0\u0887\0\u0887\0\u7676\0\u76b1\0\u76ec"+
    "\0\u7727\0\u7762\0\u779d\0\u77d8\0\u7813\0\u784e\0\u7889\0\u78c4"+
    "\0\u78ff\0\u793a\0\u7975\0\u79b0\0\u79eb\0\u0162\0\u7a26\0\u7a61"+
    "\0\u7a9c\0\u0162\0\u7ad7\0\u7b12\0\u7b4d\0\u7b88\0\u7bc3\0\u0887"+
    "\0\u7bfe\0\u7c39\0\u0887\0\u7c74\0\u7caf\0\u7cea\0\u7d25\0\u7d60"+
    "\0\u7d9b\0\u0887\0\u0887\0\u7dd6\0\u7e11\0\u7e4c\0\u7e87\0\u7ec2"+
    "\0\u7efd\0\u0162\0\u7f38\0\u7f73\0\u7fae\0\u0887\0\u7fe9\0\u8024"+
    "\0\u805f\0\u809a\0\u80d5\0\u0162\0\u8110\0\u814b\0\u8186\0\u81c1"+
    "\0\u81fc\0\u0887\0\u0887\0\u8237\0\u8272\0\u82ad\0\u82e8\0\u8323"+
    "\0\u0162\0\u0162\0\u835e\0\u8399\0\u83d4\0\u0887\0\u0887\0\u840f"+
    "\0\u844a\0\u8485\0\u0887";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[667];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\1\4\1\11\1\12"+
    "\1\10\1\13\2\10\1\14\1\10\1\12\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\4\10\1\30\1\31\1\32\1\33\1\34\6\10"+
    "\1\35\1\36\1\37\1\40\1\41\1\10\1\42\2\10"+
    "\1\43\5\10\1\44\1\4\71\45\1\46\1\47\71\50"+
    "\1\51\1\50\75\0\1\6\70\0\1\7\1\5\1\6"+
    "\70\7\5\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\46\10\13\0\1\52\70\0\2\12\1\52\5\0\1\12"+
    "\66\0\1\53\2\0\1\54\54\0\15\55\1\56\55\55"+
    "\5\0\5\57\1\0\2\57\1\0\2\57\3\0\3\57"+
    "\1\60\1\61\1\62\1\63\5\57\1\64\1\65\1\57"+
    "\1\66\7\57\1\67\1\70\2\57\1\71\1\72\11\57"+
    "\7\0\5\10\1\0\2\10\1\0\2\10\3\0\3\10"+
    "\1\73\42\10\7\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\2\10\1\74\1\10\1\75\10\10\1\76\1\77"+
    "\27\10\7\0\5\10\1\0\1\100\1\10\1\0\2\10"+
    "\3\0\5\10\1\101\1\10\1\102\36\10\7\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\4\10\1\103\41\10"+
    "\7\0\5\10\1\0\2\10\1\0\2\10\3\0\5\10"+
    "\1\104\2\10\1\105\4\10\1\106\30\10\7\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\10\10\1\107\2\10"+
    "\1\110\32\10\7\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\13\10\1\111\32\10\7\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\14\10\1\112\15\10\1\113\13\10"+
    "\7\0\5\10\1\0\2\10\1\0\2\10\3\0\14\10"+
    "\1\114\31\10\7\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\4\10\1\115\41\10\7\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\21\10\1\116\24\10\7\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\4\10\1\117\6\10"+
    "\1\120\32\10\7\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\2\10\1\121\10\10\1\122\1\10\1\123\30\10"+
    "\7\0\5\10\1\0\2\10\1\0\2\10\3\0\4\10"+
    "\1\124\41\10\7\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\4\10\1\125\41\10\7\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\2\10\1\126\10\10\1\127\2\10"+
    "\1\130\27\10\7\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\36\10\1\131\7\10\7\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\41\10\1\132\4\10\2\0\71\45"+
    "\73\0\1\133\1\134\71\50\1\0\1\50\71\0\1\135"+
    "\10\0\2\136\6\0\1\136\62\0\2\137\3\0\1\137"+
    "\1\0\2\137\5\0\1\137\1\0\1\137\2\0\1\137"+
    "\7\0\4\137\2\0\1\137\2\0\1\137\26\0\1\140"+
    "\7\0\1\140\60\0\5\57\1\0\2\57\1\0\2\57"+
    "\3\0\46\57\7\0\5\57\1\0\2\57\1\0\2\57"+
    "\3\0\6\57\1\141\4\57\1\142\32\57\7\0\5\57"+
    "\1\0\1\143\1\57\1\0\2\57\3\0\46\57\7\0"+
    "\5\57\1\0\2\57\1\0\2\57\3\0\2\57\1\144"+
    "\1\57\1\145\41\57\7\0\5\57\1\0\2\57\1\0"+
    "\2\57\3\0\10\57\1\146\4\57\1\147\30\57\7\0"+
    "\5\57\1\0\2\57\1\0\2\57\3\0\2\57\1\150"+
    "\10\57\1\151\32\57\7\0\5\57\1\0\2\57\1\0"+
    "\2\57\3\0\14\57\1\152\31\57\7\0\5\57\1\0"+
    "\2\57\1\0\2\57\3\0\4\57\1\153\10\57\1\154"+
    "\30\57\7\0\5\57\1\0\2\57\1\0\2\57\3\0"+
    "\2\57\1\155\43\57\7\0\5\57\1\0\2\57\1\0"+
    "\2\57\3\0\16\57\1\156\27\57\7\0\5\57\1\0"+
    "\2\57\1\0\2\57\3\0\2\57\1\157\2\57\1\160"+
    "\40\57\7\0\5\57\1\0\2\57\1\0\2\57\3\0"+
    "\2\57\1\161\1\57\1\162\41\57\7\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\3\10\1\163\42\10\7\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\6\10\1\164"+
    "\37\10\7\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\6\10\1\165\37\10\7\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\32\10\1\166\13\10\7\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\7\10\1\167\36\10\7\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\15\10\1\170"+
    "\30\10\7\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\5\10\1\171\40\10\7\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\10\10\1\172\35\10\7\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\3\10\1\173\42\10\7\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\16\10\1\174"+
    "\27\10\7\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\4\10\1\175\41\10\7\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\32\10\1\176\13\10\7\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\4\10\1\177\41\10\7\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\14\10\1\200"+
    "\31\10\7\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\14\10\1\201\31\10\7\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\7\10\1\202\36\10\7\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\32\10\1\203\13\10\7\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\3\10\1\204"+
    "\5\10\1\205\34\10\7\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\7\10\1\206\20\10\1\207\15\10\7\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\22\10\1\210"+
    "\23\10\7\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\6\10\1\211\37\10\7\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\31\10\1\212\14\10\7\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\27\10\1\213\16\10\7\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\5\10\1\214"+
    "\40\10\7\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\14\10\1\215\31\10\7\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\6\10\1\216\37\10\7\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\32\10\1\217\13\10\7\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\5\10\1\220"+
    "\40\10\7\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\33\10\1\221\12\10\7\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\3\10\1\222\42\10\7\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\24\10\1\223\21\10\7\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\37\10\1\224"+
    "\6\10\7\0\5\57\1\0\2\57\1\0\2\57\3\0"+
    "\5\57\1\225\40\57\7\0\5\57\1\0\2\57\1\0"+
    "\2\57\3\0\5\57\1\226\40\57\7\0\5\57\1\0"+
    "\2\57\1\0\2\57\3\0\6\57\1\227\24\57\1\230"+
    "\12\57\7\0\5\57\1\0\2\57\1\0\2\57\3\0"+
    "\14\57\1\231\31\57\7\0\5\57\1\0\2\57\1\0"+
    "\2\57\3\0\31\57\1\232\14\57\7\0\5\57\1\0"+
    "\2\57\1\0\2\57\3\0\4\57\1\233\41\57\7\0"+
    "\5\57\1\0\2\57\1\0\2\57\3\0\32\57\1\234"+
    "\13\57\7\0\5\57\1\0\2\57\1\0\2\57\3\0"+
    "\32\57\1\235\13\57\7\0\5\57\1\0\2\57\1\0"+
    "\2\57\3\0\6\57\1\236\37\57\7\0\5\57\1\0"+
    "\2\57\1\0\2\57\3\0\6\57\1\237\37\57\7\0"+
    "\5\57\1\0\2\57\1\0\2\57\3\0\30\57\1\240"+
    "\15\57\7\0\5\57\1\0\2\57\1\0\2\57\3\0"+
    "\2\57\1\241\43\57\7\0\5\57\1\0\2\57\1\0"+
    "\2\57\3\0\14\57\1\242\31\57\7\0\5\57\1\0"+
    "\2\57\1\0\2\57\3\0\14\57\1\243\31\57\7\0"+
    "\5\57\1\0\2\57\1\0\2\57\3\0\6\57\1\244"+
    "\37\57\7\0\5\57\1\0\2\57\1\0\2\57\3\0"+
    "\13\57\1\245\1\57\1\246\30\57\7\0\5\57\1\0"+
    "\2\57\1\0\2\57\3\0\27\57\1\247\16\57\7\0"+
    "\5\57\1\0\2\57\1\0\2\57\3\0\5\57\1\250"+
    "\40\57\7\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\4\10\1\251\41\10\7\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\12\10\1\252\33\10\7\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\33\10\1\253\12\10\7\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\7\10\1\254"+
    "\36\10\7\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\3\10\1\255\2\10\1\256\37\10\7\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\13\10\1\257\32\10\7\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\13\10\1\260"+
    "\32\10\7\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\4\10\1\261\41\10\7\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\4\10\1\262\41\10\7\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\13\10\1\263\32\10\7\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\4\10\1\264"+
    "\41\10\7\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\7\10\1\265\36\10\7\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\6\10\1\266\37\10\7\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\4\10\1\267\41\10\7\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\13\10\1\270"+
    "\13\10\1\271\16\10\7\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\4\10\1\272\41\10\7\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\2\10\1\273\13\10\1\274"+
    "\27\10\7\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\14\10\1\275\31\10\7\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\27\10\1\276\16\10\7\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\15\10\1\277\30\10\7\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\23\10\1\300"+
    "\22\10\7\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\15\10\1\301\30\10\7\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\3\10\1\302\42\10\7\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\2\10\1\303\43\10\7\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\17\10\1\304"+
    "\26\10\7\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\12\10\1\305\33\10\7\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\13\10\1\306\32\10\7\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\10\10\1\307\35\10\7\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\21\10\1\310"+
    "\24\10\7\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\23\10\1\311\22\10\7\0\5\57\1\0\2\57\1\0"+
    "\2\57\3\0\13\57\1\312\32\57\7\0\5\57\1\0"+
    "\2\57\1\0\2\57\3\0\6\57\1\313\37\57\7\0"+
    "\5\57\1\0\2\57\1\0\2\57\3\0\4\57\1\314"+
    "\41\57\7\0\5\57\1\0\2\57\1\0\2\57\3\0"+
    "\2\57\1\315\43\57\7\0\5\57\1\0\2\57\1\0"+
    "\2\57\3\0\17\57\1\316\26\57\7\0\5\57\1\0"+
    "\2\57\1\0\2\57\3\0\16\57\1\317\27\57\7\0"+
    "\5\57\1\0\2\57\1\0\2\57\3\0\13\57\1\320"+
    "\32\57\7\0\5\57\1\0\2\57\1\0\2\57\3\0"+
    "\4\57\1\321\41\57\7\0\5\57\1\0\2\57\1\0"+
    "\2\57\3\0\4\57\1\322\41\57\7\0\5\57\1\0"+
    "\2\57\1\0\2\57\3\0\4\57\1\323\41\57\7\0"+
    "\5\57\1\0\2\57\1\0\2\57\3\0\4\57\1\324"+
    "\41\57\7\0\5\57\1\0\2\57\1\0\2\57\3\0"+
    "\15\57\1\325\30\57\7\0\5\57\1\0\2\57\1\0"+
    "\2\57\3\0\31\57\1\326\14\57\7\0\5\57\1\0"+
    "\2\57\1\0\2\57\3\0\31\57\1\327\14\57\7\0"+
    "\5\57\1\0\2\57\1\0\2\57\3\0\3\57\1\330"+
    "\42\57\7\0\5\57\1\0\2\57\1\0\2\57\3\0"+
    "\6\57\1\331\37\57\7\0\5\57\1\0\2\57\1\0"+
    "\2\57\3\0\17\57\1\332\26\57\7\0\5\57\1\0"+
    "\2\57\1\0\2\57\3\0\14\57\1\333\31\57\7\0"+
    "\5\57\1\0\2\57\1\0\2\57\3\0\16\57\1\334"+
    "\27\57\7\0\5\57\1\0\2\57\1\0\1\335\1\57"+
    "\3\0\46\57\7\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\5\10\1\336\40\10\7\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\13\10\1\337\1\10\1\340\11\10"+
    "\1\341\16\10\7\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\27\10\1\342\16\10\7\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\4\10\1\343\41\10\7\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\6\10\1\344\37\10"+
    "\7\0\5\10\1\0\2\10\1\0\2\10\3\0\5\10"+
    "\1\345\40\10\7\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\6\10\1\346\37\10\7\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\5\10\1\347\40\10\7\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\17\10\1\350\26\10"+
    "\7\0\5\10\1\0\2\10\1\0\2\10\3\0\11\10"+
    "\1\351\34\10\7\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\15\10\1\352\30\10\7\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\32\10\1\353\13\10\7\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\16\10\1\354\27\10"+
    "\7\0\5\10\1\0\2\10\1\0\2\10\3\0\17\10"+
    "\1\355\26\10\7\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\6\10\1\356\37\10\7\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\33\10\1\357\12\10\7\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\13\10\1\360\32\10"+
    "\7\0\5\10\1\0\2\10\1\0\2\10\3\0\2\10"+
    "\1\361\43\10\7\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\14\10\1\362\31\10\7\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\24\10\1\363\21\10\7\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\7\10\1\364\36\10"+
    "\7\0\5\10\1\0\2\10\1\0\2\10\3\0\4\10"+
    "\1\365\41\10\7\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\27\10\1\366\16\10\7\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\12\10\1\367\33\10\7\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\2\10\1\370\10\10"+
    "\1\371\1\10\1\372\1\373\13\10\1\374\1\375\1\376"+
    "\11\10\7\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\16\10\1\377\27\10\7\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\37\10\1\u0100\6\10\7\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\35\10\1\u0101\10\10\7\0"+
    "\5\57\1\0\2\57\1\0\2\57\3\0\14\57\1\u0102"+
    "\31\57\7\0\5\57\1\0\2\57\1\0\2\57\3\0"+
    "\3\57\1\u0103\42\57\7\0\5\57\1\0\2\57\1\0"+
    "\2\57\3\0\14\57\1\u0104\31\57\7\0\5\57\1\0"+
    "\2\57\1\0\2\57\3\0\14\57\1\u0105\31\57\7\0"+
    "\5\57\1\0\2\57\1\0\2\57\3\0\13\57\1\u0106"+
    "\32\57\7\0\5\57\1\0\2\57\1\0\2\57\3\0"+
    "\27\57\1\u0107\16\57\7\0\5\57\1\0\2\57\1\0"+
    "\2\57\3\0\5\57\1\u0108\40\57\7\0\5\57\1\0"+
    "\2\57\1\0\2\57\3\0\13\57\1\u0109\32\57\7\0"+
    "\5\57\1\0\2\57\1\0\2\57\3\0\17\57\1\u010a"+
    "\26\57\7\0\5\57\1\0\2\57\1\0\2\57\3\0"+
    "\3\57\1\u010b\42\57\7\0\5\57\1\0\2\57\1\0"+
    "\2\57\3\0\5\57\1\u010c\40\57\7\0\5\57\1\0"+
    "\2\57\1\0\2\57\3\0\14\57\1\u010d\31\57\7\0"+
    "\5\57\1\0\2\57\1\0\2\57\3\0\14\57\1\u010e"+
    "\31\57\7\0\5\57\1\0\2\57\1\0\2\57\3\0"+
    "\16\57\1\u010f\27\57\7\0\5\57\1\0\2\57\1\0"+
    "\2\57\3\0\12\57\1\u0110\33\57\7\0\5\57\1\0"+
    "\2\57\1\0\2\57\3\0\4\57\1\u0111\41\57\7\0"+
    "\5\57\1\0\2\57\1\0\2\57\3\0\16\57\1\u0112"+
    "\27\57\7\0\5\57\1\0\2\57\1\0\2\57\3\0"+
    "\6\57\1\u0113\37\57\7\0\5\57\1\0\2\57\1\0"+
    "\2\57\3\0\4\57\1\u0114\41\57\7\0\5\57\1\0"+
    "\2\57\1\0\2\57\3\0\13\57\1\u0115\32\57\7\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\6\10\1\u0116"+
    "\37\10\7\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\33\10\1\u0117\12\10\7\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\14\10\1\u0118\31\10\7\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\13\10\1\u0119\32\10\7\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\15\10\1\u011a"+
    "\30\10\7\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\3\10\1\u011b\42\10\7\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\3\10\1\u011c\42\10\7\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\12\10\1\u011d\33\10\7\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\43\10\1\u011e"+
    "\2\10\7\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\12\10\1\u011f\33\10\7\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\14\10\1\u0120\31\10\7\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\33\10\1\u0121\12\10\7\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\17\10\1\u0122"+
    "\26\10\7\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\15\10\1\u0123\30\10\7\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\33\10\1\u0124\12\10\7\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\44\10\1\u0125\1\10\7\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\5\10\1\u0126"+
    "\40\10\7\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\4\10\1\u0127\41\10\7\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\25\10\1\u0128\20\10\7\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\27\10\1\u0129\16\10\7\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\15\10\1\u012a"+
    "\30\10\7\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\3\10\1\u012b\42\10\7\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\33\10\1\u012c\12\10\7\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\14\10\1\u012d\31\10\7\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\14\10\1\u012e"+
    "\31\10\7\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\13\10\1\u012f\32\10\7\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\5\10\1\u0130\40\10\7\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\2\10\1\u0131\43\10\7\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\6\10\1\u0132"+
    "\37\10\7\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\25\10\1\u0133\20\10\7\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\42\10\1\u0134\3\10\7\0\5\57\1\0"+
    "\2\57\1\0\2\57\3\0\31\57\1\u0135\14\57\7\0"+
    "\5\57\1\0\2\57\1\0\2\57\3\0\12\57\1\u0136"+
    "\33\57\7\0\5\57\1\0\2\57\1\0\2\57\3\0"+
    "\3\57\1\u0137\42\57\7\0\5\57\1\0\2\57\1\0"+
    "\2\57\3\0\17\57\1\u0138\26\57\7\0\5\57\1\0"+
    "\2\57\1\0\2\57\3\0\32\57\1\u0139\13\57\7\0"+
    "\5\57\1\0\2\57\1\0\2\57\3\0\2\57\1\u013a"+
    "\43\57\7\0\5\57\1\0\2\57\1\0\2\57\3\0"+
    "\15\57\1\u013b\30\57\7\0\5\57\1\0\2\57\1\0"+
    "\2\57\3\0\16\57\1\u013c\27\57\7\0\5\57\1\0"+
    "\2\57\1\0\2\57\3\0\2\57\1\u013d\30\57\1\u013e"+
    "\12\57\7\0\5\57\1\0\2\57\1\0\2\57\3\0"+
    "\15\57\1\u013f\30\57\7\0\5\57\1\0\2\57\1\0"+
    "\2\57\3\0\13\57\1\u0140\32\57\7\0\5\57\1\0"+
    "\2\57\1\0\2\57\3\0\2\57\1\u0141\43\57\7\0"+
    "\5\57\1\0\2\57\1\0\2\57\3\0\17\57\1\u0142"+
    "\26\57\7\0\5\57\1\0\2\57\1\0\2\57\3\0"+
    "\5\57\1\u0143\40\57\7\0\5\57\1\0\2\57\1\0"+
    "\2\57\3\0\7\57\1\u0144\36\57\7\0\5\57\1\0"+
    "\2\57\1\0\2\57\3\0\12\57\1\u0145\33\57\7\0"+
    "\5\57\1\0\2\57\1\0\2\57\3\0\3\57\1\u0146"+
    "\42\57\7\0\5\57\1\0\2\57\1\0\2\57\3\0"+
    "\3\57\1\u0147\42\57\7\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\6\10\1\u0148\37\10\7\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\30\10\1\u0149\15\10\7\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\31\10\1\u014a"+
    "\14\10\7\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\30\10\1\u014b\15\10\7\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\3\10\1\u014c\42\10\7\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\2\10\1\u014d\43\10\7\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\2\10\1\u014e"+
    "\1\u014f\42\10\7\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\16\10\1\u0150\27\10\7\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\27\10\1\u0151\16\10\7\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\4\10\1\u0152\41\10"+
    "\7\0\5\10\1\0\2\10\1\0\2\10\3\0\2\10"+
    "\1\u0153\43\10\7\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\13\10\1\u0154\32\10\7\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\14\10\1\u0155\31\10\7\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\4\10\1\u0156\41\10"+
    "\7\0\5\10\1\0\2\10\1\0\2\10\3\0\12\10"+
    "\1\u0157\33\10\7\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\26\10\1\u0158\17\10\7\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\32\10\1\u0159\13\10\7\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\3\10\1\u015a\42\10"+
    "\7\0\5\10\1\0\2\10\1\0\2\10\3\0\6\10"+
    "\1\u015b\37\10\7\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\6\10\1\u015c\21\10\1\u015d\15\10\7\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\3\10\1\u015e\42\10"+
    "\7\0\5\10\1\0\2\10\1\0\2\10\3\0\17\10"+
    "\1\u015f\26\10\7\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\13\10\1\u0160\32\10\7\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\27\10\1\u0161\16\10\7\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\26\10\1\u0162\17\10"+
    "\7\0\5\57\1\0\2\57\1\0\2\57\3\0\12\57"+
    "\1\u0163\33\57\7\0\5\57\1\0\2\57\1\0\2\57"+
    "\3\0\17\57\1\u0164\26\57\7\0\5\57\1\0\2\57"+
    "\1\0\2\57\3\0\15\57\1\u0165\30\57\7\0\5\57"+
    "\1\0\2\57\1\0\2\57\3\0\12\57\1\u0166\33\57"+
    "\7\0\5\57\1\0\2\57\1\0\2\57\3\0\12\57"+
    "\1\u0167\33\57\7\0\5\57\1\0\2\57\1\0\2\57"+
    "\3\0\5\57\1\u0168\40\57\7\0\5\57\1\0\2\57"+
    "\1\0\2\57\3\0\4\57\1\u0169\41\57\7\0\5\57"+
    "\1\0\2\57\1\0\2\57\3\0\6\57\1\u016a\37\57"+
    "\7\0\5\57\1\0\2\57\1\0\2\57\3\0\7\57"+
    "\1\u016b\36\57\7\0\5\57\1\0\2\57\1\0\2\57"+
    "\3\0\13\57\1\u016c\32\57\7\0\5\57\1\0\2\57"+
    "\1\0\2\57\3\0\6\57\1\u016d\37\57\7\0\5\57"+
    "\1\0\2\57\1\0\2\57\3\0\3\57\1\u016e\42\57"+
    "\7\0\5\57\1\0\2\57\1\0\2\57\3\0\31\57"+
    "\1\u016f\14\57\7\0\5\57\1\0\2\57\1\0\2\57"+
    "\3\0\4\57\1\u0170\41\57\7\0\5\57\1\0\2\57"+
    "\1\0\2\57\3\0\14\57\1\u0171\31\57\7\0\5\57"+
    "\1\0\2\57\1\0\2\57\3\0\4\57\1\u0172\41\57"+
    "\7\0\5\57\1\0\2\57\1\0\2\57\3\0\3\57"+
    "\1\u0173\42\57\7\0\5\57\1\0\2\57\1\0\2\57"+
    "\3\0\15\57\1\u0174\30\57\7\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\15\10\1\u0175\30\10\7\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\13\10\1\u0176\32\10"+
    "\7\0\5\10\1\0\2\10\1\0\2\10\3\0\15\10"+
    "\1\u0177\30\10\7\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\43\10\1\u0178\2\10\7\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\3\10\1\u0179\42\10\7\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\27\10\1\u017a\16\10"+
    "\7\0\5\10\1\0\2\10\1\0\2\10\3\0\2\10"+
    "\1\u017b\43\10\7\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\4\10\1\u017c\41\10\7\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\4\10\1\u017d\41\10\7\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\6\10\1\u017e\37\10"+
    "\7\0\5\10\1\0\2\10\1\0\2\10\3\0\5\10"+
    "\1\u017f\40\10\7\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\12\10\1\u0180\33\10\7\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\3\10\1\u0181\24\10\1\u0182\15\10"+
    "\7\0\5\10\1\0\2\10\1\0\2\10\3\0\33\10"+
    "\1\u0183\12\10\7\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\4\10\1\u0184\10\10\1\u0185\30\10\7\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\15\10\1\u0186\30\10"+
    "\7\0\5\10\1\0\2\10\1\0\2\10\3\0\4\10"+
    "\1\u0187\41\10\7\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\13\10\1\u0188\32\10\7\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\2\10\1\u0189\43\10\7\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\4\10\1\u018a\41\10"+
    "\7\0\5\10\1\0\2\10\1\0\2\10\3\0\13\10"+
    "\1\u018b\32\10\7\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\16\10\1\u018c\27\10\7\0\5\57\1\0\2\57"+
    "\1\0\2\57\3\0\3\57\1\u018d\42\57\7\0\5\57"+
    "\1\0\2\57\1\0\2\57\3\0\4\57\1\u018e\41\57"+
    "\7\0\5\57\1\0\2\57\1\0\2\57\3\0\13\57"+
    "\1\u018f\32\57\7\0\5\57\1\0\2\57\1\0\2\57"+
    "\3\0\17\57\1\u0190\26\57\7\0\5\57\1\0\2\57"+
    "\1\0\2\57\3\0\3\57\1\u0191\42\57\7\0\5\57"+
    "\1\0\2\57\1\0\2\57\3\0\12\57\1\u0192\33\57"+
    "\7\0\5\57\1\0\2\57\1\0\2\57\3\0\3\57"+
    "\1\u0193\42\57\7\0\5\57\1\0\2\57\1\0\2\57"+
    "\3\0\6\57\1\u0194\37\57\7\0\5\57\1\0\2\57"+
    "\1\0\2\57\3\0\27\57\1\u0195\16\57\7\0\5\57"+
    "\1\0\2\57\1\0\2\57\3\0\15\57\1\u0196\30\57"+
    "\7\0\5\57\1\0\2\57\1\0\2\57\3\0\6\57"+
    "\1\u0197\37\57\7\0\5\57\1\0\2\57\1\0\2\57"+
    "\3\0\4\57\1\u0198\41\57\7\0\5\57\1\0\2\57"+
    "\1\0\2\57\3\0\3\57\1\u0199\42\57\7\0\5\57"+
    "\1\0\2\57\1\0\2\57\3\0\12\57\1\u019a\33\57"+
    "\7\0\5\57\1\0\2\57\1\0\2\57\3\0\16\57"+
    "\1\u019b\27\57\7\0\5\57\1\0\2\57\1\0\2\57"+
    "\3\0\6\57\1\u019c\37\57\7\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\13\10\1\u019d\32\10\7\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\7\10\1\u019e\36\10"+
    "\7\0\5\10\1\0\2\10\1\0\2\10\3\0\3\10"+
    "\1\u019f\42\10\7\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\27\10\1\u01a0\16\10\7\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\6\10\1\u01a1\37\10\7\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\17\10\1\u01a2\26\10"+
    "\7\0\5\10\1\0\2\10\1\0\2\10\3\0\6\10"+
    "\1\u01a3\37\10\7\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\4\10\1\u01a4\41\10\7\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\6\10\1\u01a5\37\10\7\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\3\10\1\u01a6\3\10"+
    "\1\u01a7\20\10\1\u01a8\15\10\7\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\13\10\1\u01a9\32\10\7\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\16\10\1\u01aa\27\10"+
    "\7\0\5\10\1\0\2\10\1\0\2\10\3\0\27\10"+
    "\1\u01ab\16\10\7\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\5\10\1\u01ac\40\10\7\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\31\10\1\u01ad\14\10\7\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\13\10\1\u01ae\32\10"+
    "\7\0\5\10\1\0\2\10\1\0\2\10\3\0\5\10"+
    "\1\u01af\40\10\7\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\6\10\1\u01b0\37\10\7\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\27\10\1\u01b1\16\10\7\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\30\10\1\u01b2\15\10"+
    "\7\0\5\10\1\0\2\10\1\0\2\10\3\0\4\10"+
    "\1\u01b3\41\10\7\0\5\57\1\0\2\57\1\0\2\57"+
    "\3\0\15\57\1\u01b4\30\57\7\0\5\57\1\0\2\57"+
    "\1\0\2\57\3\0\3\57\1\u01b5\42\57\7\0\5\57"+
    "\1\0\2\57\1\0\2\57\3\0\14\57\1\u01b6\31\57"+
    "\7\0\5\57\1\0\2\57\1\0\2\57\3\0\4\57"+
    "\1\u01b7\41\57\7\0\5\57\1\0\2\57\1\0\2\57"+
    "\3\0\4\57\1\u01b8\41\57\7\0\5\57\1\0\2\57"+
    "\1\0\2\57\3\0\13\57\1\u01b9\32\57\7\0\5\57"+
    "\1\0\2\57\1\0\2\57\3\0\15\57\1\u01ba\30\57"+
    "\7\0\5\57\1\0\2\57\1\0\2\57\3\0\2\57"+
    "\1\u01bb\43\57\7\0\5\57\1\0\2\57\1\0\2\57"+
    "\3\0\13\57\1\u01bc\32\57\7\0\5\57\1\0\2\57"+
    "\1\0\2\57\3\0\15\57\1\u01bd\30\57\7\0\5\57"+
    "\1\0\2\57\1\0\2\57\3\0\7\57\1\u01be\36\57"+
    "\7\0\5\57\1\0\2\57\1\0\2\57\3\0\2\57"+
    "\1\u01bf\13\57\1\u01c0\13\57\1\u01c1\1\u01c2\12\57\7\0"+
    "\5\57\1\0\2\57\1\0\2\57\3\0\7\57\1\u01c3"+
    "\36\57\7\0\5\57\1\0\2\57\1\0\2\57\3\0"+
    "\43\57\1\u01c4\2\57\7\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\14\10\1\u01c5\31\10\7\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\4\10\1\u01c6\41\10\7\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\3\10\1\u01c7"+
    "\42\10\7\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\12\10\1\u01c8\33\10\7\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\12\10\1\u01c9\33\10\7\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\4\10\1\u01ca\41\10\7\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\12\10\1\u01cb"+
    "\33\10\7\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\4\10\1\u01cc\41\10\7\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\13\10\1\u01cd\32\10\7\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\13\10\1\u01ce\32\10\7\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\16\10\1\u01cf"+
    "\27\10\7\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\5\10\1\u01d0\40\10\7\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\14\10\1\u01d1\31\10\7\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\15\10\1\u01d2\30\10\7\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\6\10\1\u01d3"+
    "\37\10\7\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\14\10\1\u01d4\31\10\7\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\14\10\1\u01d5\31\10\7\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\33\10\1\u01d6\12\10\7\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\12\10\1\u01d7"+
    "\33\10\7\0\5\57\1\0\2\57\1\0\2\57\3\0"+
    "\32\57\1\u01d8\13\57\7\0\5\57\1\0\2\57\1\0"+
    "\2\57\3\0\7\57\1\u01d9\36\57\7\0\5\57\1\0"+
    "\2\57\1\0\2\57\3\0\3\57\1\u01da\42\57\7\0"+
    "\5\57\1\0\2\57\1\0\2\57\3\0\30\57\1\u01db"+
    "\15\57\7\0\5\57\1\0\2\57\1\0\2\57\3\0"+
    "\4\57\1\u01dc\41\57\7\0\5\57\1\0\2\57\1\0"+
    "\2\57\3\0\16\57\1\u01dd\27\57\7\0\5\57\1\0"+
    "\2\57\1\0\2\57\3\0\34\57\1\u01de\11\57\7\0"+
    "\5\57\1\0\2\57\1\0\2\57\3\0\14\57\1\u01df"+
    "\31\57\7\0\5\57\1\0\2\57\1\0\2\57\3\0"+
    "\14\57\1\u01e0\31\57\7\0\5\57\1\0\2\57\1\0"+
    "\2\57\3\0\7\57\1\u01e1\36\57\7\0\5\57\1\0"+
    "\2\57\1\0\2\57\3\0\5\57\1\u01e2\40\57\7\0"+
    "\5\57\1\0\2\57\1\0\2\57\3\0\3\57\1\u01e3"+
    "\42\57\7\0\5\57\1\0\2\57\1\0\2\57\3\0"+
    "\14\57\1\u01e4\31\57\7\0\5\57\1\0\2\57\1\0"+
    "\2\57\3\0\13\57\1\u01e5\32\57\7\0\5\57\1\0"+
    "\2\57\1\0\2\57\3\0\5\57\1\u01e6\40\57\7\0"+
    "\5\57\1\0\2\57\1\0\2\57\3\0\7\57\1\u01e7"+
    "\36\57\7\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\5\10\1\u01e8\40\10\7\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\2\10\1\u01e9\43\10\7\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\2\10\1\u01ea\43\10\7\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\4\10\1\u01eb"+
    "\41\10\7\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\4\10\1\u01ec\41\10\7\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\17\10\1\u01ed\26\10\7\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\5\10\1\u01ee\40\10\7\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\14\10\1\u01ef"+
    "\31\10\7\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\14\10\1\u01f0\31\10\7\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\6\10\1\u01f1\37\10\7\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\4\10\1\u01f2\41\10\7\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\15\10\1\u01f3"+
    "\30\10\7\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\32\10\1\u01f4\13\10\7\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\13\10\1\u01f5\32\10\7\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\2\10\1\u01f6\4\10\1\u01f7"+
    "\36\10\7\0\5\57\1\0\2\57\1\0\2\57\3\0"+
    "\33\57\1\u01f8\12\57\7\0\5\57\1\0\2\57\1\0"+
    "\2\57\3\0\5\57\1\u01f9\40\57\7\0\5\57\1\0"+
    "\2\57\1\0\2\57\3\0\15\57\1\u01fa\30\57\7\0"+
    "\5\57\1\0\2\57\1\0\2\57\3\0\17\57\1\u01fb"+
    "\26\57\7\0\5\57\1\0\2\57\1\0\2\57\3\0"+
    "\6\57\1\u01fc\37\57\7\0\5\57\1\0\2\57\1\0"+
    "\2\57\3\0\4\57\1\u01fd\41\57\7\0\5\57\1\0"+
    "\2\57\1\0\2\57\3\0\6\57\1\u01fe\37\57\7\0"+
    "\5\57\1\0\2\57\1\0\2\57\3\0\12\57\1\u01ff"+
    "\33\57\7\0\5\57\1\0\2\57\1\0\2\57\3\0"+
    "\15\57\1\u0200\30\57\7\0\5\57\1\0\2\57\1\0"+
    "\2\57\3\0\3\57\1\u0201\42\57\7\0\5\57\1\0"+
    "\2\57\1\0\2\57\3\0\3\57\1\u0202\42\57\7\0"+
    "\5\57\1\0\2\57\1\0\2\57\3\0\17\57\1\u0203"+
    "\26\57\7\0\5\57\1\0\2\57\1\0\2\57\3\0"+
    "\13\57\1\u0204\32\57\7\0\5\57\1\0\2\57\1\0"+
    "\2\57\3\0\4\57\1\u0205\41\57\7\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\6\10\1\u0206\37\10\7\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\6\10\1\u0207"+
    "\37\10\7\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\3\10\1\u0208\42\10\7\0\5\10\1\0\1\u0209\1\10"+
    "\1\0\2\10\3\0\46\10\7\0\5\10\1\0\1\u020a"+
    "\1\10\1\0\2\10\3\0\46\10\7\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\6\10\1\u020b\37\10\7\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\3\10\1\u020c"+
    "\42\10\7\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\17\10\1\u020d\26\10\7\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\13\10\1\u020e\32\10\7\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\4\10\1\u020f\41\10\7\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\27\10\1\u0210"+
    "\16\10\7\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\3\10\1\u0211\42\10\7\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\13\10\1\u0212\32\10\7\0\5\57\1\0"+
    "\2\57\1\0\2\57\3\0\27\57\1\u0213\16\57\7\0"+
    "\5\57\1\0\2\57\1\0\2\57\3\0\15\57\1\u0214"+
    "\30\57\7\0\5\57\1\0\2\57\1\0\2\57\3\0"+
    "\14\57\1\u0215\31\57\7\0\5\57\1\0\2\57\1\0"+
    "\2\57\3\0\33\57\1\u0216\12\57\7\0\5\57\1\0"+
    "\2\57\1\0\2\57\3\0\12\57\1\u0217\33\57\7\0"+
    "\5\57\1\0\2\57\1\0\2\57\3\0\12\57\1\u0218"+
    "\33\57\7\0\5\57\1\0\2\57\1\0\2\57\3\0"+
    "\13\57\1\u0219\32\57\7\0\5\57\1\0\2\57\1\0"+
    "\2\57\3\0\33\57\1\u021a\12\57\7\0\5\57\1\0"+
    "\2\57\1\0\2\57\3\0\15\57\1\u021b\30\57\7\0"+
    "\5\57\1\0\2\57\1\0\2\57\3\0\2\57\1\u021c"+
    "\43\57\7\0\5\57\1\0\2\57\1\0\2\57\3\0"+
    "\4\57\1\u021d\41\57\7\0\5\57\1\0\2\57\1\0"+
    "\2\57\3\0\13\57\1\u021e\32\57\7\0\5\57\1\0"+
    "\2\57\1\0\2\57\3\0\3\57\1\u021f\42\57\7\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\15\10\1\u0220"+
    "\30\10\7\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\3\10\1\u0221\42\10\7\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\4\10\1\u0222\41\10\7\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\15\10\1\u0223\30\10\7\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\6\10\1\u0224"+
    "\37\10\7\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\12\10\1\u0225\33\10\7\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\14\10\1\u0226\31\10\7\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\14\10\1\u0227\31\10\7\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\2\10\1\u0228"+
    "\43\10\7\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\3\10\1\u0229\42\10\7\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\5\10\1\u022a\40\10\7\0\5\57\1\0"+
    "\2\57\1\0\2\57\3\0\15\57\1\u022b\30\57\7\0"+
    "\5\57\1\0\2\57\1\0\2\57\3\0\33\57\1\u022c"+
    "\12\57\7\0\5\57\1\0\2\57\1\0\2\57\3\0"+
    "\15\57\1\u022d\30\57\7\0\5\57\1\0\2\57\1\0"+
    "\2\57\3\0\16\57\1\u022e\27\57\7\0\5\57\1\0"+
    "\2\57\1\0\2\57\3\0\32\57\1\u022f\13\57\7\0"+
    "\5\57\1\0\2\57\1\0\2\57\3\0\7\57\1\u0230"+
    "\36\57\7\0\5\57\1\0\2\57\1\0\2\57\3\0"+
    "\16\57\1\u0231\27\57\7\0\5\57\1\0\2\57\1\0"+
    "\2\57\3\0\6\57\1\u0232\37\57\7\0\5\57\1\0"+
    "\2\57\1\0\2\57\3\0\31\57\1\u0233\14\57\7\0"+
    "\5\57\1\0\2\57\1\0\2\57\3\0\6\57\1\u0234"+
    "\37\57\7\0\5\57\1\0\2\57\1\0\2\57\3\0"+
    "\27\57\1\u0235\16\57\7\0\5\57\1\0\2\57\1\0"+
    "\2\57\3\0\30\57\1\u0236\15\57\7\0\5\57\1\0"+
    "\2\57\1\0\2\57\3\0\3\57\1\u0237\42\57\7\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\13\10\1\u0238"+
    "\32\10\7\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\16\10\1\u0239\27\10\7\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\7\10\1\u023a\36\10\7\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\6\10\1\u023b\37\10\7\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\4\10\1\u023c"+
    "\41\10\7\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\3\10\1\u023d\42\10\7\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\6\10\1\u023e\37\10\7\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\14\10\1\u023f\31\10\7\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\16\10\1\u0240"+
    "\27\10\7\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\4\10\1\u0241\41\10\7\0\5\57\1\0\2\57\1\0"+
    "\2\57\3\0\30\57\1\u0242\15\57\7\0\5\57\1\0"+
    "\2\57\1\0\2\57\3\0\6\57\1\u0243\37\57\7\0"+
    "\5\57\1\0\2\57\1\0\2\57\3\0\6\57\1\u0244"+
    "\37\57\7\0\5\57\1\0\2\57\1\0\2\57\3\0"+
    "\6\57\1\u0245\37\57\7\0\5\57\1\0\2\57\1\0"+
    "\2\57\3\0\13\57\1\u0246\32\57\7\0\5\57\1\0"+
    "\2\57\1\0\2\57\3\0\10\57\1\u0247\35\57\7\0"+
    "\5\57\1\0\2\57\1\0\2\57\3\0\6\57\1\u0248"+
    "\37\57\7\0\5\57\1\0\2\57\1\0\2\57\3\0"+
    "\15\57\1\u0249\30\57\7\0\5\57\1\0\2\57\1\0"+
    "\2\57\3\0\14\57\1\u024a\31\57\7\0\5\57\1\0"+
    "\2\57\1\0\2\57\3\0\12\57\1\u024b\33\57\7\0"+
    "\5\57\1\0\2\57\1\0\2\57\3\0\3\57\1\u024c"+
    "\42\57\7\0\5\57\1\0\2\57\1\0\2\57\3\0"+
    "\3\57\1\u024d\42\57\7\0\5\10\1\0\2\10\1\0"+
    "\2\10\3\0\14\10\1\u024e\31\10\7\0\5\10\1\0"+
    "\2\10\1\0\2\10\3\0\32\10\1\u024f\13\10\7\0"+
    "\5\10\1\0\2\10\1\0\2\10\3\0\16\10\1\u0250"+
    "\27\10\7\0\5\10\1\0\2\10\1\0\2\10\3\0"+
    "\45\10\1\u0251\7\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\6\10\1\u0252\37\10\7\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\32\10\1\u0253\13\10\7\0\5\57"+
    "\1\0\2\57\1\0\2\57\3\0\15\57\1\u0254\30\57"+
    "\7\0\5\57\1\0\2\57\1\0\2\57\3\0\15\57"+
    "\1\u0255\30\57\7\0\5\57\1\0\2\57\1\0\2\57"+
    "\3\0\15\57\1\u0256\30\57\7\0\5\57\1\0\2\57"+
    "\1\0\2\57\3\0\12\57\1\u0257\33\57\7\0\5\57"+
    "\1\0\2\57\1\0\2\57\3\0\17\57\1\u0258\26\57"+
    "\7\0\5\57\1\0\2\57\1\0\2\57\3\0\4\57"+
    "\1\u0259\41\57\7\0\5\57\1\0\2\57\1\0\2\57"+
    "\3\0\33\57\1\u025a\12\57\7\0\5\57\1\0\2\57"+
    "\1\0\2\57\3\0\13\57\1\u025b\32\57\7\0\5\57"+
    "\1\0\2\57\1\0\2\57\3\0\32\57\1\u025c\13\57"+
    "\7\0\5\57\1\0\2\57\1\0\2\57\3\0\7\57"+
    "\1\u025d\36\57\7\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\3\10\1\u025e\42\10\7\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\15\10\1\u025f\30\10\7\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\6\10\1\u0260\37\10"+
    "\7\0\5\10\1\0\2\10\1\0\2\10\3\0\16\10"+
    "\1\u0261\27\10\7\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\3\10\1\u0262\42\10\7\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\33\10\1\u0263\12\10\7\0\5\57"+
    "\1\0\2\57\1\0\2\57\3\0\4\57\1\u0264\41\57"+
    "\7\0\5\57\1\0\2\57\1\0\2\57\3\0\13\57"+
    "\1\u0265\32\57\7\0\5\57\1\0\2\57\1\0\2\57"+
    "\3\0\13\57\1\u0266\32\57\7\0\5\57\1\0\2\57"+
    "\1\0\2\57\3\0\7\57\1\u0267\36\57\7\0\5\57"+
    "\1\0\2\57\1\0\2\57\3\0\4\57\1\u0268\41\57"+
    "\7\0\5\57\1\0\2\57\1\0\2\57\3\0\7\57"+
    "\1\u0269\36\57\7\0\5\57\1\0\2\57\1\0\2\57"+
    "\3\0\16\57\1\u026a\27\57\7\0\5\57\1\0\2\57"+
    "\1\0\2\57\3\0\14\57\1\u026b\31\57\7\0\5\57"+
    "\1\0\2\57\1\0\2\57\3\0\4\57\1\u026c\41\57"+
    "\7\0\5\57\1\0\2\57\1\0\2\57\3\0\13\57"+
    "\1\u026d\32\57\7\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\14\10\1\u026e\31\10\7\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\15\10\1\u026f\30\10\7\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\2\10\1\u0270\43\10"+
    "\7\0\5\10\1\0\2\10\1\0\2\10\3\0\6\10"+
    "\1\u0271\37\10\7\0\5\57\1\0\2\57\1\0\2\57"+
    "\3\0\5\57\1\u0272\40\57\7\0\5\57\1\0\2\57"+
    "\1\0\2\57\3\0\14\57\1\u0273\31\57\7\0\5\57"+
    "\1\0\2\57\1\0\2\57\3\0\14\57\1\u0274\31\57"+
    "\7\0\5\57\1\0\2\57\1\0\2\57\3\0\10\57"+
    "\1\u0275\35\57\7\0\5\57\1\0\2\57\1\0\2\57"+
    "\3\0\11\57\1\u0276\34\57\7\0\5\57\1\0\2\57"+
    "\1\0\2\57\3\0\6\57\1\u0277\37\57\7\0\5\57"+
    "\1\0\2\57\1\0\2\57\3\0\14\57\1\u0278\31\57"+
    "\7\0\5\57\1\0\2\57\1\0\2\57\3\0\5\57"+
    "\1\u0279\40\57\7\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\31\10\1\u027a\14\10\7\0\5\10\1\0\2\10"+
    "\1\0\2\10\3\0\13\10\1\u027b\32\10\7\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\27\10\1\u027c\16\10"+
    "\7\0\5\10\1\0\2\10\1\0\2\10\3\0\15\10"+
    "\1\u027d\30\10\7\0\5\57\1\0\2\57\1\0\2\57"+
    "\3\0\3\57\1\u027e\42\57\7\0\5\57\1\0\2\57"+
    "\1\0\2\57\3\0\2\57\1\u027f\43\57\7\0\5\57"+
    "\1\0\2\57\1\0\2\57\3\0\12\57\1\u0280\33\57"+
    "\7\0\5\57\1\0\2\57\1\0\2\57\3\0\12\57"+
    "\1\u0281\33\57\7\0\5\57\1\0\2\57\1\0\2\57"+
    "\3\0\6\57\1\u0282\37\57\7\0\5\57\1\0\2\57"+
    "\1\0\2\57\3\0\4\57\1\u0283\41\57\7\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\14\10\1\u0284\31\10"+
    "\7\0\5\10\1\0\2\10\1\0\2\10\3\0\15\10"+
    "\1\u0285\30\10\7\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\13\10\1\u0286\32\10\7\0\5\57\1\0\2\57"+
    "\1\0\2\57\3\0\14\57\1\u0287\31\57\7\0\5\57"+
    "\1\0\2\57\1\0\2\57\3\0\32\57\1\u0288\13\57"+
    "\7\0\5\57\1\0\2\57\1\0\2\57\3\0\7\57"+
    "\1\u0289\36\57\7\0\5\57\1\0\2\57\1\0\2\57"+
    "\3\0\3\57\1\u028a\42\57\7\0\5\57\1\0\2\57"+
    "\1\0\2\57\3\0\3\57\1\u028b\42\57\7\0\5\10"+
    "\1\0\2\10\1\0\2\10\3\0\6\10\1\u028c\37\10"+
    "\7\0\5\10\1\0\2\10\1\0\2\10\3\0\14\10"+
    "\1\u028d\31\10\7\0\5\57\1\0\2\57\1\0\2\57"+
    "\3\0\14\57\1\u028e\31\57\7\0\5\57\1\0\2\57"+
    "\1\0\2\57\3\0\13\57\1\u028f\32\57\7\0\5\57"+
    "\1\0\2\57\1\0\2\57\3\0\10\57\1\u0290\35\57"+
    "\7\0\5\10\1\0\2\10\1\0\2\10\3\0\43\10"+
    "\1\u0291\2\10\7\0\5\10\1\0\2\10\1\0\2\10"+
    "\3\0\3\10\1\u0292\42\10\7\0\5\57\1\0\2\57"+
    "\1\0\2\57\3\0\4\57\1\u0293\41\57\7\0\5\57"+
    "\1\0\2\57\1\0\2\57\3\0\17\57\1\u0294\26\57"+
    "\7\0\5\57\1\0\2\57\1\0\2\57\3\0\2\57"+
    "\1\u0295\43\57\7\0\5\57\1\0\2\57\1\0\2\57"+
    "\3\0\27\57\1\u0296\16\57\7\0\5\57\1\0\2\57"+
    "\1\0\2\57\3\0\4\57\1\u0297\41\57\7\0\5\57"+
    "\1\0\2\57\1\0\2\57\3\0\14\57\1\u0298\31\57"+
    "\7\0\5\57\1\0\2\57\1\0\2\57\3\0\14\57"+
    "\1\u0299\31\57\7\0\5\57\1\0\2\57\1\0\2\57"+
    "\3\0\4\57\1\u029a\41\57\7\0\5\57\1\0\2\57"+
    "\1\0\2\57\3\0\27\57\1\u029b\16\57\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[33984];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\7\1\2\11\24\1\1\11"+
    "\1\1\1\11\3\1\4\0\1\11\54\1\3\11\u023e\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[667];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  private StringBuilder string; // NOPMD
  private MySymbolFactory symFactory;
  private final UnifyHash<BigInteger> bignumbers = new UnifyHash<BigInteger>();
  private boolean version25 = true;
  
  public void setVersion25(boolean on) {
    version25 = on;
  }
  
  public boolean isVersion25() {
    return version25;
  }
  
  public void setSymbolFactory(MySymbolFactory factory) {
    symFactory = factory;
  }

  private Symbol symbol(int type) {
    return symFactory.newSymbol(yytext(), type, yyline+1, yycolumn, yyline+1, yycolumn+yylength());
  }
  private Symbol symbol(int type, Object value) {
    return symFactory.newSymbol(yytext(), type, yyline+1, yycolumn, yyline+1, yycolumn+yylength(), value);
  }
  
  private BigInteger convertNumeral(String numeral) {
	BigInteger result = new BigInteger(numeral);
	int hash = result.hashCode();
	for (BigInteger integer : bignumbers.iterateHashCode(hash)) {
		if (integer.equals(result))
			return integer;
	}
	bignumbers.put(hash, result);
	return result;
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1744) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public com.github.jhoenicke.javacup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 69: 
          { return symbol(LexerSymbols.CEXTENSIONS, yytext());
          }
        case 101: break;
        case 17: 
          { string.append ('\"');
          }
        case 102: break;
        case 11: 
          { String value = string.toString();
                                   string = null;
                                   yybegin(YYINITIAL);
                                   return symbol(LexerSymbols.STRING, value);
          }
        case 103: break;
        case 20: 
          { return symbol(LexerSymbols.BINARY, yytext());
          }
        case 104: break;
        case 60: 
          { return symbol(LexerSymbols.CHECKSAT, yytext());
          }
        case 105: break;
        case 48: 
          { return symbol(LexerSymbols.INCLUDE, yytext());
          }
        case 106: break;
        case 77: 
          { return symbol(LexerSymbols.DECLARECONST, yytext());
          }
        case 107: break;
        case 78: 
          { return symbol(LexerSymbols.CPRINTSUCCESS, yytext());
          }
        case 108: break;
        case 51: 
          { return symbol(LexerSymbols.NUMERALSYM, yytext());
          }
        case 109: break;
        case 89: 
          { return symbol(LexerSymbols.CSTRONGSIMPLIFIER, yytext());
          }
        case 110: break;
        case 61: 
          { return symbol(LexerSymbols.GETMODEL, yytext());
          }
        case 111: break;
        case 99: 
          { return symbol(LexerSymbols.CINTERPOLANTCHECKMODE, yytext());
          }
        case 112: break;
        case 95: 
          { return symbol(LexerSymbols.CPRODUCEUNSATCORES, yytext());
          }
        case 113: break;
        case 54: 
          { return symbol(LexerSymbols.SETINFO, yytext());
          }
        case 114: break;
        case 28: 
          { return symbol(LexerSymbols.NONE, yytext());
          }
        case 115: break;
        case 6: 
          { return symbol(LexerSymbols.RPAR);
          }
        case 116: break;
        case 70: 
          { return symbol(LexerSymbols.CDEFINITION, yytext());
          }
        case 117: break;
        case 56: 
          { return symbol(LexerSymbols.GETINFO, yytext());
          }
        case 118: break;
        case 21: 
          { return symbol(LexerSymbols.SAT, yytext());
          }
        case 119: break;
        case 32: 
          { return symbol(LexerSymbols.RESET, yytext());
          }
        case 120: break;
        case 15: 
          { return symbol(LexerSymbols.AS, yytext());
          }
        case 121: break;
        case 38: 
          { return symbol(LexerSymbols.CNAMED, yytext());
          }
        case 122: break;
        case 5: 
          { return symbol(LexerSymbols.LPAR);
          }
        case 123: break;
        case 16: 
          { string.append('\"');
          }
        case 124: break;
        case 31: 
          { return symbol(LexerSymbols.ERRORSYM, yytext());
          }
        case 125: break;
        case 74: 
          { return symbol(LexerSymbols.CRANDOMSEED, yytext());
          }
        case 126: break;
        case 41: 
          { return symbol(LexerSymbols.EXISTS, yytext());
          }
        case 127: break;
        case 29: 
          { return symbol(LexerSymbols.PUSH, yytext());
          }
        case 128: break;
        case 82: 
          { return symbol(LexerSymbols.GETUNSATCORE, yytext());
          }
        case 129: break;
        case 87: 
          { return symbol(LexerSymbols.CINTERACTIVEMODE, yytext());
          }
        case 130: break;
        case 37: 
          { return symbol(LexerSymbols.CSORTS, yytext());
          }
        case 131: break;
        case 25: 
          { return symbol(LexerSymbols.EXIT, yytext());
          }
        case 132: break;
        case 59: 
          { return symbol(LexerSymbols.SETLOGIC, yytext());
          }
        case 133: break;
        case 98: 
          { return symbol(LexerSymbols.CREGULAROUTPUTCHANNEL, yytext());
          }
        case 134: break;
        case 50: 
          { return symbol(LexerSymbols.DECIMALSYM, yytext());
          }
        case 135: break;
        case 9: 
          { string = new StringBuilder(); if (version25) yybegin(STRING25); else yybegin(STRING20);
          }
        case 136: break;
        case 18: 
          { return symbol(LexerSymbols.DECIMAL, new BigDecimal(yytext()));
          }
        case 137: break;
        case 94: 
          { return symbol(LexerSymbols.CPRODUCEASSIGNMENTS, yytext());
          }
        case 138: break;
        case 71: 
          { return symbol(LexerSymbols.UNSUPPORTED, yytext());
          }
        case 139: break;
        case 45: 
          { return symbol(LexerSymbols.STRINGSYM, yytext());
          }
        case 140: break;
        case 63: 
          { return symbol(LexerSymbols.GETVALUE, yytext());
          }
        case 141: break;
        case 30: 
          { return symbol(LexerSymbols.CFUNS, yytext());
          }
        case 142: break;
        case 40: 
          { return symbol(LexerSymbols.ASSERT, yytext());
          }
        case 143: break;
        case 52: 
          { return symbol(LexerSymbols.CTIMEOUT, yytext());
          }
        case 144: break;
        case 13: 
          { return symbol(LexerSymbols.SYMBOL, yytext().substring(1, yylength()-1));
          }
        case 145: break;
        case 79: 
          { return symbol(LexerSymbols.IMMEDIATEEXIT, yytext());
          }
        case 146: break;
        case 91: 
          { return symbol(LexerSymbols.CHECKSATASSUMING, yytext());
          }
        case 147: break;
        case 88: 
          { return symbol(LexerSymbols.CFUNSDESCRIPTION, yytext());
          }
        case 148: break;
        case 33: 
          { return symbol(LexerSymbols.TIMED, yytext());
          }
        case 149: break;
        case 65: 
          { return symbol(LexerSymbols.SETOPTION, yytext());
          }
        case 150: break;
        case 27: 
          { return symbol(LexerSymbols.TRUE, yytext());
          }
        case 151: break;
        case 53: 
          { return symbol(LexerSymbols.CPATTERN, yytext());
          }
        case 152: break;
        case 76: 
          { return symbol(LexerSymbols.DECLARESORT, yytext());
          }
        case 153: break;
        case 36: 
          { return symbol(LexerSymbols.FALSE, yytext());
          }
        case 154: break;
        case 83: 
          { return symbol(LexerSymbols.CPRODUCEMODELS, yytext());
          }
        case 155: break;
        case 24: 
          { return symbol(LexerSymbols.POP, yytext());
          }
        case 156: break;
        case 62: 
          { return symbol(LexerSymbols.GETPROOF, yytext());
          }
        case 157: break;
        case 1: 
          { return symbol(LexerSymbols.error, yytext());
          }
        case 158: break;
        case 35: 
          { return symbol(LexerSymbols.LOGIC, yytext());
          }
        case 159: break;
        case 66: 
          { return symbol(LexerSymbols.INCOMPLETE, yytext());
          }
        case 160: break;
        case 85: 
          { return symbol(LexerSymbols.RESETASSERTIONS, yytext());
          }
        case 161: break;
        case 42: 
          { return symbol(LexerSymbols.THEORY, yytext());
          }
        case 162: break;
        case 72: 
          { return symbol(LexerSymbols.DECLAREFUN, yytext());
          }
        case 163: break;
        case 43: 
          { return symbol(LexerSymbols.FORALL, yytext());
          }
        case 164: break;
        case 93: 
          { return symbol(LexerSymbols.CONTINUEDEXECUTION, yytext());
          }
        case 165: break;
        case 49: 
          { return symbol(LexerSymbols.UNKNOWN, yytext());
          }
        case 166: break;
        case 46: 
          { return symbol(LexerSymbols.CVALUES, yytext());
          }
        case 167: break;
        case 26: 
          { return symbol(LexerSymbols.ECHO, yytext());
          }
        case 168: break;
        case 73: 
          { return symbol(LexerSymbols.DEFINESORT, yytext());
          }
        case 169: break;
        case 55: 
          { return symbol(LexerSymbols.SIMPLIFY, yytext());
          }
        case 170: break;
        case 64: 
          { return symbol(LexerSymbols.CVERBOSITY, yytext());
          }
        case 171: break;
        case 39: 
          { return symbol(LexerSymbols.CNOTES, yytext());
          }
        case 172: break;
        case 23: 
          { return symbol(LexerSymbols.PAR, yytext());
          }
        case 173: break;
        case 12: 
          { string.append('\\');
          }
        case 174: break;
        case 58: 
          { return symbol(LexerSymbols.CLANGUAGE, yytext());
          }
        case 175: break;
        case 75: 
          { return symbol(LexerSymbols.ALLSAT, yytext());
          }
        case 176: break;
        case 8: 
          { return symbol(LexerSymbols.BANG, yytext());
          }
        case 177: break;
        case 81: 
          { return symbol(LexerSymbols.GETASSIGNMENT, yytext());
          }
        case 178: break;
        case 86: 
          { return symbol(LexerSymbols.GETINTERPOLANTS, yytext());
          }
        case 179: break;
        case 97: 
          { return symbol(LexerSymbols.GETUNSATASSUMPTIONS, yytext());
          }
        case 180: break;
        case 14: 
          { return symbol(LexerSymbols.KEYWORD, yytext());
          }
        case 181: break;
        case 67: 
          { return symbol(LexerSymbols.DEFINEFUN, yytext());
          }
        case 182: break;
        case 96: 
          { return symbol(LexerSymbols.FINDIMPLIEDEQUALITY, yytext());
          }
        case 183: break;
        case 2: 
          { /* ignore */
          }
        case 184: break;
        case 90: 
          { return symbol(LexerSymbols.CSORTSDESCRIPTION, yytext());
          }
        case 185: break;
        case 84: 
          { return symbol(LexerSymbols.CPRODUCEPROOFS, yytext());
          }
        case 186: break;
        case 4: 
          { return symbol(LexerSymbols.NUMERAL, convertNumeral(yytext()));
          }
        case 187: break;
        case 34: 
          { return symbol(LexerSymbols.UNSAT, yytext());
          }
        case 188: break;
        case 47: 
          { return symbol(LexerSymbols.SUCCESS, yytext());
          }
        case 189: break;
        case 92: 
          { return symbol(LexerSymbols.CEXPANDDEFINITIONS, yytext());
          }
        case 190: break;
        case 10: 
          { string.append( yytext() );
          }
        case 191: break;
        case 3: 
          { return symbol(LexerSymbols.SYMBOL, yytext());
          }
        case 192: break;
        case 22: 
          { return symbol(LexerSymbols.LET, yytext());
          }
        case 193: break;
        case 68: 
          { return symbol(LexerSymbols.GETOPTION, yytext());
          }
        case 194: break;
        case 57: 
          { return symbol(LexerSymbols.CTHEORIES, yytext());
          }
        case 195: break;
        case 7: 
          { return symbol(LexerSymbols.UNDERSCORE, yytext());
          }
        case 196: break;
        case 100: 
          { return symbol(LexerSymbols.CDIAGNOSTICOUTPUTCHANNEL, yytext());
          }
        case 197: break;
        case 19: 
          { return symbol(LexerSymbols.HEXADECIMAL, yytext());
          }
        case 198: break;
        case 80: 
          { return symbol(LexerSymbols.GETASSERTIONS, yytext());
          }
        case 199: break;
        case 44: 
          { return symbol(LexerSymbols.MEMOUT, yytext());
          }
        case 200: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return symbol(LexerSymbols.EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
