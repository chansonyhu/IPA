
//----------------------------------------------------
// The following code was generated by jh-javacup-1.0 20160720
// Thu Jan 24 14:33:40 CST 2019
//----------------------------------------------------

package de.uni_freiburg.informatik.ultimate.smtinterpol.smtlib2;

import de.uni_freiburg.informatik.ultimate.logic.*;
import de.uni_freiburg.informatik.ultimate.util.datastructures.ScopedHashMap;
import java.math.BigInteger;
import java.math.BigDecimal;
import java.util.Arrays;
import com.github.jhoenicke.javacup.runtime.Symbol;
import de.uni_freiburg.informatik.ultimate.smtinterpol.util.MySymbolFactory;
import java.util.Map;

/** jh-javacup-1.0 20160720 generated parser.
  * @version Thu Jan 24 14:33:40 CST 2019
  */
public class Parser extends com.github.jhoenicke.javacup.runtime.LRParser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(com.github.jhoenicke.javacup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(com.github.jhoenicke.javacup.runtime.Scanner s, com.github.jhoenicke.javacup.runtime.SymbolFactory sf) {super(s,sf);}
  /** Return action table */
  protected String[] action_table() { 
    return new String[] {
    "\356\000\002\021\001\021\001\021\001\021\001" +
    "\022\003\033\001\033\001\033\001\033\001\033" +
    "\001\020\005\017\001\023\001\023\004\025\002" +
    "\025\002\025\004\024\003\027\002\026\002\030" +
    "\001\030\005\031\004\032\004\034\001\034\004" +
    "\034\010\065\000\034\010\067\000\034\010\070" +
    "\000\034\005\036\005\041\005\040\013\042\004" +
    "\042\002\052\005\043\004\043\002\053\005\044" +
    "\001\044\001\045\002\045\002\045\002\045\002" +
    "\035\002\035\004\035\000\047\002\047\002\047" +
    "\003\047\003\047\007\101\000\047\006\047\003" +
    "\047\010\104\000\047\002\047\002\047\001\047" +
    "\001\047\002\047\001\047\004\047\001\047\002" +
    "\047\001\047\001\047\001\047\001\047\004\047" +
    "\001\047\002\047\002\047\002\047\002\047\001" +
    "\047\001\047\001\047\003\107\000\047\004\047" +
    "\002\047\007\050\003\057\001\057\002\100\000" +
    "\073\001\073\002\056\000\055\001\055\002\102" +
    "\000\060\001\060\002\061\000\072\000\071\001" +
    "\071\002\064\001\064\002\103\000\066\001\066" +
    "\002\063\000\062\001\062\002\074\002\075\002" +
    "\076\002\077\002\106\000\105\002\u0121\u013f\u013b" +
    "\u2627\u012d\u0121\u0121\u2693\u1b21\u0121\u25bf\u2567\u250f\u24b7" +
    "\u012d\u0121\u0121\u0121\u0825\u0129\u0121\u0775\u0121\u0121\u0281" +
    "\u245f\u0147\u0129\u2407\u06c5\u01e1\u23af\u01f7\u0121\u0121\u1a73" +
    "\u0121\u027f\u01f3\u0247\u023f\u0121\u02d7\u0121\u0121\u0121\u0121" +
    "\u0121\u0121\u034b\u0121\u0121\u0121\u0127\u023d\u20e3\u022f\u2357" +
    "\u0121\u0157\u0121\u19c5\u0615\u0121\u0121\u0121\u0f09\u0e59\u01f1" +
    "\u0123\u0125\u0121\u0565\u0121\u0121\u0125\u1917\u0121\u1869\u0da9" +
    "\u0121\u22ff\u17bb\u207f\u022d\u022b\u0229\u0123\u170d\u0121\u1085" +
    "\u03bd\u0121\u0121\u11f3\u0223\u0121\u0123\u0121\u0cf9\u0293\u01ef" +
    "\u01ed\u0221\u01eb\u01d5\u2963\u0121\u0121\u0121\u0121\u0121\u0121" +
    "\u0779\u0121\u0121\u0121\u0121\u0121\u0121\u01e5\u019b\u021f\u021d" +
    "\u016d\u0167\u014f\u0145\u291b\u0121\u0121\u0c49\u0b99\u0ae9\u02d5" +
    "\u0123\u028f\u012d\u201b\u0219\u0213\u020d\u0a39\u0121\u101f\u02d3" +
    "\u1fb7\u0121\u119b\u02cf\u018f\u014f\u0121\u0121\u0121\u0121\u0121" +
    "\u22a7\u0121\u0121\u0121\u0121\u0121\u06c9\u0619\u02c3\u0121\u0121" +
    "\u020b\u0209\u0121\u0121\u0121\u0121\u0121\u0121\u0121\u0207\u0121" +
    "\u0121\u0151\u224f\u0205\u0137\u0121\u28d3\u02c1\u0201\u01ff\u01fd" +
    "\u0121\u1f53\u0121\u0fb9\u0121\u02bf\u21f7\u0121\u017f\u02bd\u0121" +
    "\u1143\u0569\u02bb\u0121\u0121\u1eef\u017b\u124b\u0173\u165f\u0121" +
    "\u0121\u0121\u0989\u0121\u0121\u0121\u0121\u016f\u015d\u219f\u0121" +
    "\u0159\u0121\u0121\u1e8b\u1e27\u1dc3\u0121\u0121\u0121\u0121\u0121" +
    "\u0121\u1d5f\u01fb\u1cfb\u1c97\u0121\u0121\u08d9\u0829\u02b7\u15b1" +
    "\u1503\u1455\u13a7\u0121\u0121\u02b5\u12f9\u288b\u2843\u2147\u04c5" +
    "\u27fb\u0121\u0121\u02b3\u02ad\u02a7\u02a5\u0121\u0121\u27b3\u02a3" +
    "\u276b\u02a1\u10eb\u2723\u029f\u26db\u029b\u0121\u0121\u0121\u0121" +
    "\u0121\u0121\u01f7\u0121\u0121\u1c33\u1bcf\u0421\u2693\u0299\u0285" +
    "\u0121\u2a23\000\000\000\000\356\002\000\000\210" +
    "\000\000\000\000\174\250\214\232\000\150\226" +
    "\000\220\222\000\000\204\202\000\000\000\000" +
    "\000\244\246\000\254\000\000\000\000\224\000" +
    "\032\016\020\022\024\026\000\054\064\206\000" +
    "\000\000\000\000\236\216\234\000\000\200\176" +
    "\152\000\000\000\000\000\154\000\240\242\000" +
    "\000\260\000\000\264\000\000\000\000\000\000" +
    "\000\000\160\000\000\034\170\000\000\144\150" +
    "\340\000\314\000\000\000\000\000\000\156\004" +
    "\006\010\010\012\000\142\136\132\130\134\140" +
    "\314\000\000\000\000\000\000\000\000\000\252" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\310\000\000\000\274\000\000\000\000\230" +
    "\342\050\124\124\000\124\124\126\352\302\000" +
    "\000\000\052\116\000\000\116\116\116\116\120" +
    "\350\256\000\212\266\000\000\000\314\320\000" +
    "\000\000\000\000\066\000\312\000\276\000\000" +
    "\332\000\000\146\000\000\000\304\046\000\000" +
    "\000\000\000\270\030\042\000\040\104\322\056" +
    "\000\000\000\324\000\166\036\000\000\000\334" +
    "\122\014\000\114\344\000\000\000\000\114\346" +
    "\000\000\000\000\000\000\000\326\162\000\000" +
    "\000\000\000\000\000\262\044\000\000\000\000" +
    "\062\172\000\000\000\000\000\000\000\000\000" +
    "\100\074\060\070\106\110\000\110\110\000\000" +
    "\000\000\000\000\112\200\011\140\000\112\u0101" +
    "\126\241\022\000\126\245\015\000\003\013\210" +
    "\241\u0121\001\u0121\001\266\000\u0121\001\001\011" +
    "\001\013\000\003\000\354\104\347\266\u01ad\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\266\u01ad" +
    "\u0121\001\u0121\001\266\u01ad\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\266\u01ad\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\266\u01ad\266\u01ad\u0121\001\266" +
    "\u01ad\266\u01ad\u0121\001\266\u01ad\u0121\001\104\351" +
    "\u0121\001\u0121\001\266\u01ad\266\u01ad\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\266\u01ad\266\u01ad\266\u01ad" +
    "\266\u01ad\266\u01ad\266\u01ad\u0121\001\u0121\001\266" +
    "\u01ad\266\u01ad\266\u01ad\u0121\001\266\u01ad\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\347\u01f7\206\u0165\105\355" +
    "\064\261\032\177\200\015\200\252\112\015\112" +
    "\354\266\u01ad\167\000\266\327\266\331\266\333" +
    "\266\335\266\337\266\341\167\u014b\001\015\031" +
    "\175\000\005\226\277\176\u0159\167\u014b\263\u01a5" +
    "\072\277\167\u014b\175\u0157\226\301\226\u018f\263" +
    "\u01a7\167\u014b\072\301\336\u01b9\336\u01ed\333\u0187" +
    "\333\u01e9\167\u014b\167\u014b\174\u0155\167\u014b\167" +
    "\u014b\173\u0153\167\u014b\332\u0187\332\u01e7\320\u019f" +
    "\320\u01dd\167\u014b\167\u014b\316\u019b\316\u01d1\305" +
    "\u0187\305\u01c7\167\u014b\167\u014b\167\u014b\167\u014b" +
    "\167\u014b\167\u014b\225\u0187\225\330\167\u014b\167" +
    "\u014b\167\u014b\170\u014d\167\u014b\035\205\035\205" +
    "\035\205\035\205\035\205\035\205\035\205\035" +
    "\205\035\205\035\205\035\205\035\205\035\207" +
    "\035\207\035\211\035\211\035\211\035\213\035" +
    "\211\035\211\035\211\035\211\035\213\035\211" +
    "\035\211\035\213\035\211\150\u013d\035\205\167" +
    "\u014b\143\000\167\327\167\331\167\333\167\335" +
    "\167\337\167\341\143\u0133\147\u013b\145\u0137\144" +
    "\u0135\103\345\045\231\143\u0133\037\221\u0117\u0235" +
    "\143\u0133\353\u01fb\274\u01b9\273\u0187\272\u0187\143" +
    "\u0133\265\u01ab\260\u01a3\250\u019f\247\u019b\214\u0179" +
    "\143\u0133\143\u0133\213\u0177\143\u0133\143\u0133\212" +
    "\u0175\143\u0133\172\u0151\171\u014f\146\u0139\136\u012b" +
    "\143\u0133\143\u0133\125\072\124\076\123\102\067" +
    "\273\143\u0133\143\u0133\143\u0133\143\u0133\143\u0133" +
    "\143\u0133\065\263\047\235\143\u0133\143\u0133\143" +
    "\u0133\046\233\143\u0133\207\u0169\207\u016b\207\u016d" +
    "\207\u016d\207\u016d\207\u016d\207\u016d\207\u016d\207" +
    "\u016d\207\u016d\207\u016d\207\u016d\207\u016d\207\u016d" +
    "\207\u016d\207\u016d\207\u016d\207\u016d\207\u016d\207" +
    "\u016d\207\u016d\207\u016d\207\u016d\207\u016d\207\u016d" +
    "\207\u016d\044\227\027\171\207\u016d\143\u0133\u011f" +
    "\u0241\143\327\143\331\143\333\143\335\143\337" +
    "\143\341\060\241\060\243\060\245\u011e\u023f\u0110" +
    "\u0233\060\125\u010e\u0231\u010b\u022d\u0109\u022b\u0105\u0229" +
    "\u0104\u0227\060\125\060\247\u0103\u0225\060\125\060" +
    "\251\u0102\u0223\371\u020d\362\u0203\060\125\312\u01cd" +
    "\306\u01c7\302\u01c3\271\u01b3\244\u0199\060\125\060" +
    "\125\060\253\060\125\060\125\224\164\060\125" +
    "\220\u017d\205\u0163\051\237\u0121\001\060\125\060" +
    "\125\u0121\001\u0121\001\u0121\001\u0121\001\060\125" +
    "\060\125\060\125\060\125\060\125\060\125\u0121" +
    "\001\u0121\001\060\125\060\125\060\125\u0121\001" +
    "\060\125\u0121\001\u0121\001\132\241\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\132\125\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\132\125\u0121\001\u0121" +
    "\001\132\125\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\132\125\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\132\125\132\125\060\125\132\125\132\125" +
    "\u0121\001\132\125\u0121\001\u0121\001\060\255\u0121" +
    "\001\132\125\132\125\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\132\125\132\125\132\125\132\125\132" +
    "\125\132\125\u0121\001\u0121\001\132\125\132\125" +
    "\132\125\u0121\001\132\125\u011c\125\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u011c\125\u0121\001" +
    "\u0121\001\u011c\125\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u011c\125\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u011c\125\u011c\125\u0121\001\u011c\125\u011c" +
    "\125\u0121\001\u011c\125\u0121\001\u0121\001\132\125" +
    "\u0121\001\u011c\125\u011c\125\u0121\001\u0121\001\u0121" +
    "\001\132\u0111\u011c\125\u011c\125\u011c\125\u011c\125" +
    "\u011c\125\u011c\125\u0121\001\u0121\001\u011c\125\u011c" +
    "\125\u011c\125\u0121\001\u011c\125\u0121\001\u0121\001" +
    "\u011c\u0169\u011c\u016b\u011c\u016d\u011c\u016d\u011c\u016d\u011c" +
    "\u016d\u011c\u016d\u011c\u016d\u011c\u016d\u011c\u016d\u011c\u016d" +
    "\u011c\u016d\u011c\u016d\u011c\u016d\u011c\u016d\u011c\u016d\u011c" +
    "\u016d\u011c\u016d\u011c\u016d\u011c\u016d\u011c\u016d\u011c\u016d" +
    "\u011c\u016d\u011c\u016d\u011c\u016d\u011c\u016d\u0121\001\u011c" +
    "\125\u011c\u016d\u0121\001\376\125\u0121\001\u0121\001" +
    "\u0121\001\u011c\265\u011c\316\376\125\u0121\001\u0121" +
    "\001\376\125\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\376\125\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\376\125\376\125\u0121\001\376\125\376\125" +
    "\u0121\001\376\125\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\376\125\376\125\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\376\125\376\125\376\125\376\125\376" +
    "\125\376\125\u0121\001\u0121\001\376\125\376\125" +
    "\376\125\u0121\001\376\125\u0121\001\u0121\001\376" +
    "\u0169\376\u016b\376\u016d\376\u016d\376\u016d\376\u016d" +
    "\376\u016d\376\u016d\376\u016d\376\u016d\376\u016d\376" +
    "\u016d\376\u016d\376\u016d\376\u016d\376\u016d\376\u016d" +
    "\376\u016d\376\u016d\376\u016d\376\u016d\376\u016d\376" +
    "\u016d\376\u016d\376\u016d\376\u016d\u0121\001\376\125" +
    "\376\u016d\u0121\001\311\u0197\u0121\001\u0121\001\u0121" +
    "\001\376\265\376\316\311\u0197\u0121\001\u0121\001" +
    "\311\u0197\u0121\001\u0121\001\u0121\001\u0121\001\311" +
    "\u0197\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\311\u0197\311\u0197\u0121\001\311\u0197\311\u0197\u0121" +
    "\001\311\u0197\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\311\u0197\311\u0197\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\311\u0197\311\u0197\311\u0197\311\u0197\311\u0197" +
    "\311\u0197\u0121\001\u0121\001\311\u0197\311\u0197\311" +
    "\u0197\u0121\001\311\u0197\107\357\107\357\107\361" +
    "\107\363\107\365\107\367\107\371\107\357\107" +
    "\357\107\357\107\373\107\375\107\357\107\357" +
    "\107\357\107\357\107\357\107\357\107\357\107" +
    "\357\107\357\107\357\107\357\107\357\107\357" +
    "\107\357\u0121\001\u0121\001\107\357\311\u0197\311" +
    "\u0197\311\327\311\331\311\333\311\335\311\337" +
    "\311\u0145\311\u01cd\243\u0197\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\243\u0197\u0121\001\u0121\001" +
    "\243\u0197\u0121\001\u0121\001\u0121\001\u0121\001\243" +
    "\u0197\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\243\u0197\243\u0197\u0121\001\243\u0197\243\u0197\u0121" +
    "\001\243\u0197\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\243\u0197\243\u0197\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\243\u0197\243\u0197\243\u0197\243\u0197\243\u0197" +
    "\243\u0197\u0121\001\u0121\001\243\u0197\243\u0197\243" +
    "\u0197\u0121\001\243\u0197\075\307\075\307\075\307" +
    "\075\307\075\307\075\307\075\307\075\311\075" +
    "\313\075\315\075\317\075\321\075\307\075\307" +
    "\075\307\075\307\075\307\075\307\075\307\075" +
    "\307\075\307\075\307\075\307\075\307\075\307" +
    "\075\307\u0121\001\u0121\001\075\307\243\u0197\243" +
    "\u0197\243\327\243\331\243\333\243\335\243\337" +
    "\243\u0145\243\u0199\242\u0143\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\242\u0143\u0121\001\u0121\001" +
    "\242\u0143\u0121\001\u0121\001\u0121\001\u0121\001\242" +
    "\u0143\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\242\u0143\242\u0143\u0121\001\242\u0143\242\u0143\u0121" +
    "\001\242\u0143\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\242\u0143\242\u0143\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\242\u0143\242\u0143\242\u0143\242\u0143\242\u0143" +
    "\242\u0143\u0121\001\u0121\001\242\u0143\242\u0143\242" +
    "\u0143\u0121\001\242\u0143\034\203\034\203\034\203" +
    "\034\203\034\203\034\203\034\203\034\203\034" +
    "\203\034\203\034\203\034\203\034\203\034\203" +
    "\034\203\034\203\034\203\034\203\034\203\034" +
    "\203\034\203\034\203\034\203\034\203\034\203" +
    "\034\203\u0121\001\u0121\001\034\203\242\u0143\242" +
    "\u0143\242\327\242\331\242\333\242\335\242\337" +
    "\242\u0145\242\300\160\u0143\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\160\u0143\u0121\001\u0121\001" +
    "\160\u0143\u0121\001\u0121\001\u0121\001\u0121\001\160" +
    "\u0143\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\160\u0143\160\u0143\u0121\001\160\u0143\160\u0143\u0121" +
    "\001\160\u0143\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\160\u0143\160\u0143\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\160\u0143\160\u0143\160\u0143\160\u0143\160\u0143" +
    "\160\u0143\u0121\001\u0121\001\160\u0143\160\u0143\160" +
    "\u0143\u0121\001\160\u0143\024\167\024\167\024\167" +
    "\024\167\024\167\024\167\024\167\024\167\024" +
    "\167\024\167\024\167\024\167\024\167\024\167" +
    "\024\167\024\167\024\167\024\167\024\167\024" +
    "\167\024\167\024\167\024\167\024\167\024\167" +
    "\024\167\u0121\001\u0121\001\024\167\160\u0143\160" +
    "\u0143\160\327\160\331\160\333\160\335\160\337" +
    "\160\u0145\160\300\361\125\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\361\125\u0121\001\u0121\001" +
    "\361\125\u0121\001\u0121\001\u0121\001\u0121\001\361" +
    "\125\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\361\125\361\125\u0121\001\361\125\361\125\u0121" +
    "\001\361\125\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\361\125\361\125\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\361\125\361\125\361\125\361\125\361\125" +
    "\361\125\u0121\001\u0121\001\361\125\361\125\361" +
    "\125\u0121\001\361\125\021\163\021\163\021\163" +
    "\021\163\021\163\021\163\021\163\021\163\021" +
    "\163\021\163\021\163\021\163\021\163\021\163" +
    "\021\163\021\163\021\163\021\163\021\163\021" +
    "\163\021\163\021\163\021\163\021\163\021\163" +
    "\021\163\u0121\001\u0121\001\021\163\361\125\u0121" +
    "\001\361\127\361\131\361\133\361\135\361\137" +
    "\361\141\361\u0203\360\125\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\360\125\u0121\001\u0121\001" +
    "\360\125\u0121\001\u0121\001\u0121\001\u0121\001\360" +
    "\125\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\360\125\360\125\u0121\001\360\125\360\125\u0121" +
    "\001\360\125\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\360\125\360\125\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\360\125\360\125\360\125\360\125\360\125" +
    "\360\125\u0121\001\u0121\001\360\125\360\125\360" +
    "\125\u0121\001\360\125\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\360\125\u0121" +
    "\001\360\127\360\131\360\133\360\135\360\137" +
    "\360\141\360\u0201\325\125\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\325\125\u0121\001\u0121\001" +
    "\325\125\u0121\001\u0121\001\u0121\001\u0121\001\325" +
    "\125\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\325\125\325\125\u0121\001\325\125\325\125\u0121" +
    "\001\325\125\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\325\125\325\125\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\325\125\325\125\325\125\325\125\325\125" +
    "\325\125\u0121\001\u0121\001\325\125\325\125\325" +
    "\125\u0121\001\325\125\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\325\125\u0121" +
    "\001\325\127\325\131\325\133\325\135\325\137" +
    "\325\141\325\336\215\125\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\215\125\u0121\001\u0121\001" +
    "\215\125\u0121\001\u0121\001\u0121\001\u0121\001\215" +
    "\125\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\215\125\215\125\u0121\001\215\125\215\125\u0121" +
    "\001\215\125\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\215\125\215\125\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\215\125\215\125\215\125\215\125\215\125" +
    "\215\125\u0121\001\u0121\001\215\125\215\125\215" +
    "\125\u0121\001\215\125\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\215\125\u0121" +
    "\001\215\127\215\131\215\133\215\135\215\137" +
    "\215\141\215\u017b\204\125\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\204\125\u0121\001\u0121\001" +
    "\204\125\u0121\001\u0121\001\u0121\001\u0121\001\204" +
    "\125\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\204\125\204\125\u0121\001\204\125\204\125\u0121" +
    "\001\204\125\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\204\125\204\125\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\204\125\204\125\204\125\204\125\204\125" +
    "\204\125\u0121\001\u0121\001\204\125\204\125\204" +
    "\125\u0121\001\204\125\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\204\125\u0121" +
    "\001\204\127\204\131\204\133\204\135\204\137" +
    "\204\141\204\u0163\203\125\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\203\125\u0121\001\u0121\001" +
    "\203\125\u0121\001\u0121\001\u0121\001\u0121\001\203" +
    "\125\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\203\125\203\125\u0121\001\203\125\203\125\u0121" +
    "\001\203\125\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\203\125\203\125\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\203\125\203\125\203\125\203\125\203\125" +
    "\203\125\u0121\001\u0121\001\203\125\203\125\203" +
    "\125\u0121\001\203\125\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\203\125\u0121" +
    "\001\203\127\203\131\203\133\203\135\203\137" +
    "\203\141\203\u0161\202\125\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\202\125\u0121\001\u0121\001" +
    "\202\125\u0121\001\u0121\001\u0121\001\u0121\001\202" +
    "\125\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\202\125\202\125\u0121\001\202\125\202\125\u0121" +
    "\001\202\125\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\202\125\202\125\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\202\125\202\125\202\125\202\125\202\125" +
    "\202\125\u0121\001\u0121\001\202\125\202\125\202" +
    "\125\u0121\001\202\125\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\202\125\u0121" +
    "\001\202\127\202\131\202\133\202\135\202\137" +
    "\202\141\202\u015f\142\125\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\142\125\u0121\001\u0121\001" +
    "\142\125\u0121\001\u0121\001\u0121\001\u0121\001\142" +
    "\125\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\142\125\142\125\u0121\001\142\125\142\125\u0121" +
    "\001\142\125\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\142\125\142\125\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\142\125\142\125\142\125\142\125\142\125" +
    "\142\125\u0121\001\u0121\001\142\125\142\125\142" +
    "\125\u0121\001\142\125\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\142\125\u0121" +
    "\001\142\127\142\131\142\133\142\135\142\137" +
    "\142\141\142\u012f\116\125\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\116\125\u0121\001\u0121\001" +
    "\116\125\u0121\001\u0121\001\u0121\001\u0121\001\116" +
    "\125\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\116\125\116\125\u0121\001\116\125\116\125\u0121" +
    "\001\116\125\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\116\125\116\125\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\116\125\116\125\116\125\116\125\116\125" +
    "\116\125\u0121\001\u0121\001\116\125\116\125\116" +
    "\125\u0121\001\116\125\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\116\125\u0121" +
    "\001\116\127\116\131\116\133\116\135\116\137" +
    "\116\141\116\336\102\343\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\102\343\u0121\001\u0121\001" +
    "\102\343\u0121\001\u0121\001\u0121\001\u0121\001\102" +
    "\343\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\102\343\102\343\u0121\001\102\343\102\343\u0121" +
    "\001\102\343\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\102\343\102\343\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\102\343\102\343\102\343\102\343\102\343" +
    "\102\343\u0121\001\u0121\001\102\343\102\343\102" +
    "\343\u0121\001\102\343\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\102\343\u0121" +
    "\001\102\327\102\331\102\333\102\335\102\337" +
    "\102\341\102\314\101\325\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\101\325\u0121\001\u0121\001" +
    "\101\325\u0121\001\u0121\001\u0121\001\u0121\001\101" +
    "\325\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\101\325\101\325\u0121\001\101\325\101\325\u0121" +
    "\001\101\325\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\101\325\101\325\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\101\325\101\325\101\325\101\325\101\325" +
    "\101\325\u0121\001\u0121\001\101\325\101\325\101" +
    "\325\u0121\001\101\325\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\101\325\u0121" +
    "\001\101\327\101\331\101\333\101\335\101\337" +
    "\101\341\101\314\300\125\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\300\125\u0121\001\u0121\001" +
    "\300\125\u0121\001\u0121\001\u0121\001\u0121\001\300" +
    "\125\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\300\125\300\125\u0121\001\300\125\300\125\u0121" +
    "\001\300\125\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\300\125\300\125\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\300\125\300\125\300\125\300\125\300\125" +
    "\300\125\u0121\001\u0121\001\300\125\300\125\300" +
    "\125\u0121\001\300\125\u0121\001\217\125\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\217\125\u0121" +
    "\001\u0121\001\217\125\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\217\125\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\217\125\217\125\u0121\001\217\125" +
    "\217\125\u0121\001\217\125\u0121\001\300\125\u0121" +
    "\001\u0121\001\217\125\217\125\u0121\001\u0121\001" +
    "\300\265\300\u01c1\217\125\217\125\217\125\217" +
    "\125\217\125\217\125\u0121\001\u0121\001\217\125" +
    "\217\125\217\125\u0121\001\217\125\u0121\001\131" +
    "\125\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\131\125\u0121\001\u0121\001\131\125\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\131\125\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\131\125\131\125\u0121" +
    "\001\131\125\131\125\u0121\001\131\125\u0121\001" +
    "\217\125\u0121\001\u0121\001\131\125\131\125\u0121" +
    "\001\u0121\001\217\265\217\u017d\131\125\131\125" +
    "\131\125\131\125\131\125\131\125\u0121\001\u0121" +
    "\001\131\125\131\125\131\125\u0121\001\131\125" +
    "\u0121\001\u010c\u0183\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u010c\u0183\u0121\001\u0121\001\u010c\u0183" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u010c\u0183\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u010c\u0183" +
    "\u010c\u0183\u0121\001\u010c\u0183\u010c\u0183\u0121\001\u010c" +
    "\u0183\u0121\001\131\125\u0121\001\u0121\001\u010c\u0183" +
    "\u010c\u0183\u0121\001\u0121\001\131\265\131\306\u010c" +
    "\u0183\u010c\u0183\u010c\u0183\u010c\u0183\u010c\u0183\u010c\u0183" +
    "\u0121\001\310\u0183\u010c\u0183\u010c\u0183\u010c\u0183\u0121" +
    "\001\u010c\u0183\310\u0183\u0121\001\u0121\001\310\u0183" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\310\u0183\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\310\u0183" +
    "\310\u0183\u0121\001\310\u0183\310\u0183\u0121\001\310" +
    "\u0183\u0121\001\u0121\001\u0121\001\u0121\001\310\u0183" +
    "\310\u0183\u0121\001\u0121\001\u010c\u0183\u0121\001\310" +
    "\u0183\310\u0183\310\u0183\310\u0183\310\u0183\310\u0183" +
    "\u010c\u022f\223\u0183\310\u0183\310\u0183\310\u0183\u0121" +
    "\001\310\u0183\223\u0183\u0121\001\u0121\001\223\u0183" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\223\u0183\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\223\u0183" +
    "\223\u0183\u0121\001\223\u0183\223\u0183\u0121\001\223" +
    "\u0183\u0121\001\u0121\001\u0121\001\u0121\001\223\u0183" +
    "\223\u0183\u0121\001\u0121\001\310\u0183\u0121\001\223" +
    "\u0183\223\u0183\223\u0183\223\u0183\223\u0183\223\u0183" +
    "\310\u01cb\135\u0125\223\u0183\223\u0183\223\u0183\u0121" +
    "\001\223\u0183\135\u0125\u0121\001\u0121\001\135\u0125" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\135\u0125\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\135\u0125" +
    "\135\u0125\u0121\001\135\u0125\135\u0125\u0121\001\135" +
    "\u0125\u0121\001\u0121\001\u0121\001\u0121\001\135\u0125" +
    "\135\u0125\u0121\001\u0121\001\223\u0183\u0121\001\135" +
    "\u0125\135\u0125\135\u0125\135\u0125\135\u0125\135\u0125" +
    "\223\164\317\125\135\u0125\135\u0125\135\u0125\u0121" +
    "\001\135\u0125\317\125\u0121\001\u0121\001\317\125" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\317\125\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\317\125" +
    "\317\125\u0121\001\317\125\317\125\317\u01d5\317" +
    "\125\317\u01d7\u0121\001\u0121\001\317\u01d5\317\125" +
    "\317\125\u0121\001\u0121\001\135\u0125\317\u01d5\317" +
    "\125\317\125\317\125\317\125\317\125\317\125" +
    "\135\272\u0121\001\317\125\317\125\317\125\u0121" +
    "\001\317\125\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\317\125\u0121\001\317" +
    "\327\317\331\317\333\317\335\317\337\317\u0111" +
    "\372\125\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\372\125\u0121\001\u0121\001\372\125\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\372\125\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\372\125\372\125" +
    "\u0121\001\372\125\372\125\u0121\001\372\125\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\372\125\372\125" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\372\125\372" +
    "\125\372\125\372\125\372\125\372\125\u0121\001" +
    "\u0121\001\372\125\372\125\372\125\u0121\001\372" +
    "\125\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\372\125\u0121\001\372\127\372" +
    "\131\372\133\372\135\372\137\372\141\366\125" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\366" +
    "\125\u0121\001\u0121\001\366\125\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\366\125\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\366\125\366\125\u0121\001" +
    "\366\125\366\125\u0121\001\366\125\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\366\125\366\125\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\366\125\366\125\366" +
    "\125\366\125\366\125\366\125\u0121\001\u0121\001" +
    "\366\125\366\125\366\125\u0121\001\366\125\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\366\125\u0121\001\366\127\366\131\366" +
    "\133\366\135\366\137\366\141\365\125\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\365\125\u0121" +
    "\001\u0121\001\365\125\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\365\125\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\365\125\365\125\u0121\001\365\125" +
    "\365\125\u0121\001\365\125\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\365\125\365\125\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\365\125\365\125\365\125\365" +
    "\125\365\125\365\125\u0121\001\u0121\001\365\125" +
    "\365\125\365\125\u0121\001\365\125\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\365\125\u0121\001\365\127\365\131\365\133\365" +
    "\135\365\137\365\141\364\125\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\364\125\u0121\001\u0121" +
    "\001\364\125\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\364\125\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\364\125\364\125\u0121\001\364\125\364\125" +
    "\u0121\001\364\125\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\364\125\364\125\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\364\125\364\125\364\125\364\125\364" +
    "\125\364\125\u0121\001\u0121\001\364\125\364\125" +
    "\364\125\u0121\001\364\125\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\364\125" +
    "\u0121\001\364\127\364\131\364\133\364\135\364" +
    "\137\364\141\363\125\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\363\125\u0121\001\u0121\001\363" +
    "\125\u0121\001\u0121\001\u0121\001\u0121\001\363\125" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\363" +
    "\125\363\125\u0121\001\363\125\363\125\u0121\001" +
    "\363\125\u0121\001\u0121\001\u0121\001\u0121\001\363" +
    "\125\363\125\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\363\125\363\125\363\125\363\125\363\125\363" +
    "\125\u0121\001\u0121\001\363\125\363\125\363\125" +
    "\u0121\001\363\125\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\363\125\u0121\001" +
    "\363\127\363\131\363\133\363\135\363\137\363" +
    "\141\321\125\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\321\125\u0121\001\u0121\001\321\125\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\321\125\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\321\125\321" +
    "\125\u0121\001\321\125\321\125\u0121\001\321\125" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\321\125\321" +
    "\125\u0121\001\u0121\001\u0121\001\u0121\001\321\125" +
    "\321\125\321\125\321\125\321\125\321\125\u0121" +
    "\001\u0121\001\321\125\321\125\321\125\u0121\001" +
    "\321\125\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\321\125\u0121\001\321\127" +
    "\321\131\321\133\321\135\321\137\321\141\127" +
    "\125\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\127\125\u0121\001\u0121\001\127\125\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\127\125\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\127\125\127\125\u0121" +
    "\001\127\125\127\125\u0121\001\127\125\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\127\125\127\125\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\127\125\127\125" +
    "\127\125\127\125\127\125\127\125\u0121\001\u0121" +
    "\001\127\125\127\125\127\125\u0121\001\127\125" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\127\125\u0121\001\127\127\127\131" +
    "\127\133\127\135\127\137\127\141\121\125\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\121\125" +
    "\u0121\001\u0121\001\121\125\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\121\125\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\121\125\121\125\u0121\001\121" +
    "\125\121\125\u0121\001\121\125\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\121\125\121\125\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\121\125\121\125\121\125" +
    "\121\125\121\125\121\125\u0121\001\u0121\001\121" +
    "\125\121\125\121\125\u0121\001\121\125\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\121\125\u0121\001\121\127\121\131\121\133" +
    "\121\135\121\137\121\141\115\125\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\115\125\u0121\001" +
    "\u0121\001\115\125\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\115\125\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\115\125\115\125\u0121\001\115\125\115" +
    "\125\u0121\001\115\125\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\115\125\115\125\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\115\125\115\125\115\125\115\125" +
    "\115\125\115\125\u0121\001\u0121\001\115\125\115" +
    "\125\115\125\u0121\001\115\125\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\115" +
    "\125\u0121\001\115\127\115\131\115\133\115\135" +
    "\115\137\115\141\113\125\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\113\125\u0121\001\u0121\001" +
    "\113\125\u0121\001\u0121\001\u0121\001\u0121\001\113" +
    "\125\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\113\125\113\125\u0121\001\113\125\113\125\u0121" +
    "\001\113\125\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\113\125\113\125\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\113\125\113\125\113\125\113\125\113\125" +
    "\113\125\u0121\001\u0121\001\113\125\113\125\113" +
    "\125\u0121\001\113\125\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\113\125\u0121" +
    "\001\113\127\113\131\113\133\113\135\113\137" +
    "\113\141\074\125\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\074\125\u0121\001\u0121\001\074\125" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\074\125\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\074\125" +
    "\074\125\u0121\001\074\125\074\125\u0121\001\074" +
    "\125\u0121\001\u0121\001\u0121\001\u0121\001\074\125" +
    "\074\125\u0121\001\u0121\001\u0121\001\u0121\001\074" +
    "\125\074\125\074\125\074\125\074\125\074\125" +
    "\u0121\001\u0121\001\074\125\074\125\074\125\u0121" +
    "\001\074\125\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\074\125\u0121\001\074" +
    "\127\074\131\074\133\074\135\074\137\074\141" +
    "\042\125\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\042\125\u0121\001\u0121\001\042\125\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\042\125\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\042\125\042\125" +
    "\u0121\001\042\125\042\125\u0121\001\042\125\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\042\125\042\125" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\042\125\042" +
    "\125\042\125\042\125\042\125\042\125\u0121\001" +
    "\u0121\001\042\125\042\125\042\125\u0121\001\042" +
    "\125\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\042\125\u0121\001\042\127\042" +
    "\131\042\133\042\135\042\137\042\141\007\125" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\007" +
    "\125\u0121\001\u0121\001\007\125\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\007\125\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\007\125\007\125\u0121\001" +
    "\007\125\007\125\u0121\001\007\125\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\007\125\007\125\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\007\125\007\125\007" +
    "\125\007\125\007\125\007\125\u0121\001\u0121\001" +
    "\007\125\007\125\007\125\u0121\001\007\125\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\007\125\u0121\001\007\127\007\131\007" +
    "\133\007\135\007\137\007\141\u011b\125\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u011b\125\u0121" +
    "\001\u0121\001\u011b\125\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u011b\125\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u011b\125\u011b\125\u0121\001\u011b\125" +
    "\u011b\125\u0121\001\u011b\125\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u011b\125\u011b\125\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u011b\125\u011b\125\u011b\125\u011b" +
    "\125\u011b\125\u011b\125\u0121\001\u0121\001\u011b\125" +
    "\u011b\125\u011b\125\u0121\001\u011b\125\u011a\125\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u011a\125" +
    "\u0121\001\u0121\001\u011a\125\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u011a\125\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u011a\125\u011a\125\u0121\001\u011a" +
    "\125\u011a\125\u0121\001\u011a\125\u0121\001\u0121\001" +
    "\u011b\125\u0121\001\u011a\125\u011a\125\u0121\001\u0121" +
    "\001\u0121\001\u011b\265\u011a\125\u011a\125\u011a\125" +
    "\u011a\125\u011a\125\u011a\125\u0121\001\u0121\001\u011a" +
    "\125\u011a\125\u011a\125\u0121\001\u011a\125\355\125" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\355" +
    "\125\u0121\001\u0121\001\355\125\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\355\125\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\355\125\355\125\u0121\001" +
    "\355\125\355\125\u0121\001\355\125\u0121\001\u0121" +
    "\001\u011a\125\u0121\001\355\125\355\125\u0121\001" +
    "\u0121\001\u0121\001\u011a\u0111\355\125\355\125\355" +
    "\125\355\125\355\125\355\125\u0121\001\u0121\001" +
    "\355\125\355\125\355\125\u0121\001\355\125\354" +
    "\125\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\354\125\u0121\001\u0121\001\354\125\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\354\125\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\354\125\354\125\u0121" +
    "\001\354\125\354\125\u0121\001\354\125\u0121\001" +
    "\u0121\001\355\125\u0121\001\354\125\354\125\u0121" +
    "\001\u0121\001\u0121\001\355\265\354\125\354\125" +
    "\354\125\354\125\354\125\354\125\u0121\001\u0121" +
    "\001\354\125\354\125\354\125\u0121\001\354\125" +
    "\352\125\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\352\125\u0121\001\u0121\001\352\125\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\352\125\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\352\125\352\125" +
    "\u0121\001\352\125\352\125\u0121\001\352\125\u0121" +
    "\001\u0121\001\354\125\u0121\001\352\125\352\125" +
    "\u0121\001\u0121\001\u0121\001\354\265\352\125\352" +
    "\125\352\125\352\125\352\125\352\125\u0121\001" +
    "\u0121\001\352\125\352\125\352\125\u0121\001\352" +
    "\125\343\125\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\343\125\u0121\001\u0121\001\343\125\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\343\125\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\343\125\343" +
    "\125\u0121\001\343\125\343\125\u0121\001\343\125" +
    "\u0121\001\u0121\001\352\125\u0121\001\343\125\343" +
    "\125\u0121\001\u0121\001\u0121\001\352\265\343\125" +
    "\343\125\343\125\343\125\343\125\343\125\u0121" +
    "\001\u0121\001\343\125\343\125\343\125\u0121\001" +
    "\343\125\342\125\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\342\125\u0121\001\u0121\001\342\125" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\342\125\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\342\125" +
    "\342\125\u0121\001\342\125\342\125\u0121\001\342" +
    "\125\u0121\001\u0121\001\343\125\u0121\001\342\125" +
    "\342\125\u0121\001\u0121\001\u0121\001\343\265\342" +
    "\125\342\125\342\125\342\125\342\125\342\125" +
    "\u0121\001\u0121\001\342\125\342\125\342\125\u0121" +
    "\001\342\125\341\125\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\341\125\u0121\001\u0121\001\341" +
    "\125\u0121\001\u0121\001\u0121\001\u0121\001\341\125" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\341" +
    "\125\341\125\u0121\001\341\125\341\125\u0121\001" +
    "\341\125\u0121\001\u0121\001\342\125\u0121\001\341" +
    "\125\341\125\u0121\001\u0121\001\u0121\001\342\265" +
    "\341\125\341\125\341\125\341\125\341\125\341" +
    "\125\u0121\001\u0121\001\341\125\341\125\341\125" +
    "\u0121\001\341\125\315\125\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\315\125\u0121\001\u0121\001" +
    "\315\125\u0121\001\u0121\001\u0121\001\u0121\001\315" +
    "\125\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\315\125\315\125\u0121\001\315\125\315\125\u0121" +
    "\001\315\125\u0121\001\u0121\001\341\125\u0121\001" +
    "\315\125\315\125\u0121\001\u0121\001\u0121\001\341" +
    "\265\315\125\315\125\315\125\315\125\315\125" +
    "\315\125\u0121\001\u0121\001\315\125\315\125\315" +
    "\125\u0121\001\315\125\276\125\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\276\125\u0121\001\u0121" +
    "\001\276\125\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\276\125\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\276\125\276\125\u0121\001\276\125\276\125" +
    "\u0121\001\276\125\u0121\001\u0121\001\315\125\u0121" +
    "\001\276\125\276\125\u0121\001\u0121\001\u0121\001" +
    "\315\u0111\276\125\276\125\276\125\276\125\276" +
    "\125\276\125\u0121\001\u0121\001\276\125\276\125" +
    "\276\125\u0121\001\276\125\221\125\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\221\125\u0121\001" +
    "\u0121\001\221\125\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\221\125\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\221\125\221\125\u0121\001\221\125\221" +
    "\125\u0121\001\221\125\u0121\001\u0121\001\276\125" +
    "\u0121\001\221\125\221\125\u0121\001\u0121\001\u0121" +
    "\001\276\265\221\125\221\125\221\125\221\125" +
    "\221\125\221\125\u0121\001\u0121\001\221\125\221" +
    "\125\221\125\u0121\001\221\125\211\125\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\211\125\u0121" +
    "\001\u0121\001\211\125\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\211\125\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\211\125\211\125\u0121\001\211\125" +
    "\211\125\u0121\001\211\125\u0121\001\u0121\001\221" +
    "\125\u0121\001\211\125\211\125\u0121\001\u0121\001" +
    "\u0121\001\221\265\211\125\211\125\211\125\211" +
    "\125\211\125\211\125\u0121\001\u0121\001\211\125" +
    "\211\125\211\125\u0121\001\211\125\122\125\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\122\125" +
    "\u0121\001\u0121\001\122\125\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\122\125\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\122\125\122\125\u0121\001\122" +
    "\125\122\125\u0121\001\122\125\u0121\001\u0121\001" +
    "\211\125\u0121\001\122\125\122\125\u0121\001\u0121" +
    "\001\u0121\001\211\265\122\125\122\125\122\125" +
    "\122\125\122\125\122\125\u0121\001\u0121\001\122" +
    "\125\122\125\122\125\u0121\001\122\125\066\125" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\066" +
    "\125\u0121\001\u0121\001\066\125\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\066\125\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\066\125\066\125\u0121\001" +
    "\066\125\066\125\u0121\001\066\125\u0121\001\u0121" +
    "\001\122\125\u0121\001\066\125\066\125\u0121\001" +
    "\u0121\001\u0121\001\122\u0111\066\125\066\125\066" +
    "\125\066\125\066\125\066\125\u0121\001\u0121\001" +
    "\066\125\066\125\066\125\u0121\001\066\125\375" +
    "\u0125\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\375\u0125\u0121\001\u0121\001\375\u0125\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\375\u0125\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\375\u0125\375\u0125\u0121" +
    "\001\375\u0125\375\u0125\u0121\001\375\u0125\u0121\001" +
    "\u0121\001\066\125\u0121\001\375\u0125\375\u0125\u0121" +
    "\001\u0121\001\u0121\001\066\265\375\u0125\375\u0125" +
    "\375\u0125\375\u0125\375\u0125\375\u0125\u0121\001\334" +
    "\u01eb\375\u0125\375\u0125\375\u0125\u0121\001\375\u0125" +
    "\334\u01eb\u0121\001\u0121\001\334\u01eb\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\334\u01eb\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\334\u01eb\334\u01eb\u0121" +
    "\001\334\u01eb\334\u01eb\u0121\001\334\u01eb\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\334\u01eb\334\u01eb\u0121" +
    "\001\u0121\001\375\u0125\u0121\001\334\u01eb\334\u01eb" +
    "\334\u01eb\334\u01eb\334\u01eb\334\u01eb\u0121\001\303" +
    "\u01c5\334\u01eb\334\u01eb\334\u01eb\u0121\001\334\u01eb" +
    "\303\u01c5\u0121\001\u0121\001\303\u01c5\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\303\u01c5\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\303\u01c5\303\u01c5\u0121" +
    "\001\303\u01c5\303\u01c5\u0121\001\303\u01c5\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\303\u01c5\303\u01c5\u0121" +
    "\001\u0121\001\334\u01eb\u0121\001\303\u01c5\303\u01c5" +
    "\303\u01c5\303\u01c5\303\u01c5\303\u01c5\u0121\001\264" +
    "\u01a9\303\u01c5\303\u01c5\303\u01c5\u0121\001\303\u01c5" +
    "\264\u01a9\u0121\001\u0121\001\264\u01a9\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\264\u01a9\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\264\u01a9\264\u01a9\u0121" +
    "\001\264\u01a9\264\u01a9\u0121\001\264\u01a9\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\264\u01a9\264\u01a9\u0121" +
    "\001\u0121\001\303\u01c5\u0121\001\264\u01a9\264\u01a9" +
    "\264\u01a9\264\u01a9\264\u01a9\264\u01a9\u0121\001\234" +
    "\u0125\264\u01a9\264\u01a9\264\u01a9\u0121\001\264\u01a9" +
    "\234\u0125\u0121\001\u0121\001\234\u0125\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\234\u0125\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\234\u0125\234\u0125\u0121" +
    "\001\234\u0125\234\u0125\u0121\001\234\u0125\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\234\u0125\234\u0125\u0121" +
    "\001\u0121\001\264\u01a9\u0121\001\234\u0125\234\u0125" +
    "\234\u0125\234\u0125\234\u0125\234\u0125\u0121\001\120" +
    "\u010d\234\u0125\234\u0125\234\u0125\u0121\001\234\u0125" +
    "\120\u010d\u0121\001\u0121\001\120\u010d\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\120\u010d\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\120\u010d\120\u010d\u0121" +
    "\001\120\u010d\120\u010d\u0121\001\120\u010d\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\120\u010d\120\u010d\u0121" +
    "\001\u0121\001\234\u0125\u0121\001\120\u010d\120\u010d" +
    "\120\u010d\120\u010d\120\u010d\120\u010d\u0121\001\070" +
    "\275\120\u010d\120\u010d\120\u010d\u0121\001\120\u010d" +
    "\070\275\u0121\001\u0121\001\070\275\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\070\275\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\070\275\070\275\u0121" +
    "\001\070\275\070\275\u0121\001\070\275\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\070\275\070\275\u0121" +
    "\001\u0121\001\120\u010d\u0121\001\070\275\070\275" +
    "\070\275\070\275\070\275\070\275\u0121\001\036" +
    "\217\070\275\070\275\070\275\u0121\001\070\275" +
    "\036\217\u0121\001\u0121\001\036\217\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\036\217\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\036\217\036\217\u0121" +
    "\001\036\217\036\217\u0121\001\036\217\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\036\217\036\217\u0121" +
    "\001\u0121\001\070\275\u0121\001\036\217\036\217" +
    "\036\217\036\217\036\217\036\217\u0121\001\033" +
    "\201\036\217\036\217\036\217\u0121\001\036\217" +
    "\033\201\u0121\001\u0121\001\033\201\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\033\201\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\033\201\033\201\u0121" +
    "\001\033\201\033\201\u0121\001\033\201\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\033\201\033\201\u0121" +
    "\001\u0121\001\036\217\u0121\001\033\201\033\201" +
    "\033\201\033\201\033\201\033\201\u0121\001\030" +
    "\173\033\201\033\201\033\201\u0121\001\033\201" +
    "\030\173\u0121\001\u0121\001\030\173\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\030\173\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\030\173\030\173\u0121" +
    "\001\030\173\030\173\u0121\001\030\173\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\030\173\030\173\u0121" +
    "\001\u0121\001\033\201\u0121\001\030\173\030\173" +
    "\030\173\030\173\030\173\030\173\u0121\001\014" +
    "\157\030\173\030\173\030\173\u0121\001\030\173" +
    "\014\157\u0121\001\u0121\001\014\157\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\014\157\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\014\157\014\157\u0121" +
    "\001\014\157\014\157\u0121\001\014\157\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\014\157\014\157\u0121" +
    "\001\u0121\001\030\173\u0121\001\014\157\014\157" +
    "\014\157\014\157\014\157\014\157\u0121\001\013" +
    "\155\014\157\014\157\014\157\u0121\001\014\157" +
    "\013\155\u0121\001\u0121\001\013\155\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\013\155\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\013\155\013\155\u0121" +
    "\001\013\155\013\155\u0121\001\013\155\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\013\155\013\155\u0121" +
    "\001\u0121\001\014\157\u0121\001\013\155\013\155" +
    "\013\155\013\155\013\155\013\155\u0121\001\012" +
    "\153\013\155\013\155\013\155\u0121\001\013\155" +
    "\012\153\u0121\001\u0121\001\012\153\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\012\153\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\012\153\012\153\u0121" +
    "\001\012\153\012\153\u0121\001\012\153\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\012\153\012\153\u0121" +
    "\001\u0121\001\013\155\u0121\001\012\153\012\153" +
    "\012\153\012\153\012\153\012\153\u0121\001\011" +
    "\151\012\153\012\153\012\153\u0121\001\012\153" +
    "\011\151\u0121\001\u0121\001\011\151\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\011\151\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\011\151\011\151\u0121" +
    "\001\011\151\011\151\u0121\001\011\151\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\011\151\011\151\u0121" +
    "\001\u0121\001\012\153\u0121\001\011\151\011\151" +
    "\011\151\011\151\011\151\011\151\u0121\001\u0121" +
    "\001\011\151\011\151\011\151\u0121\001\011\151" +
    "\002\017\002\021\u0121\001\002\023\002\025\002" +
    "\027\002\031\002\033\u0121\001\u0121\001\002\035" +
    "\u0121\001\u0121\001\002\037\002\041\002\043\002" +
    "\045\002\047\002\051\002\053\002\055\002\057" +
    "\u0121\001\u0121\001\u0121\001\002\061\u0121\001\u0121" +
    "\001\u0121\001\011\151\002\063\002\065\u0121\001" +
    "\u0121\001\u0121\001\002\067\002\071\002\073\u0121" +
    "\001\002\075\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\002\077\002\101\002\103\002\105\002\107\002" +
    "\111\002\113\002\115\002\117\002\121\006\017" +
    "\006\021\u0121\001\006\023\006\025\006\027\006" +
    "\031\006\033\u0121\001\u0121\001\006\035\u0121\001" +
    "\u0121\001\006\037\006\041\006\043\006\045\006" +
    "\047\006\051\006\053\006\055\006\057\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\006\063\006\065\u0121\001\u0121\001" +
    "\u0121\001\006\067\006\071\006\073\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\006\077" +
    "\006\101\006\103\006\105\006\107\006\111\006" +
    "\113\006\115\006\117\006\121\u011d\u0169\u011d\u016b" +
    "\u011d\u016d\u011d\u016d\u011d\u016d\u011d\u016d\u011d\u016d\u011d" +
    "\u016d\u011d\u016d\u011d\u016d\u011d\u016d\u011d\u016d\u011d\u016d" +
    "\u011d\u016d\u011d\u016d\u011d\u016d\u011d\u016d\u011d\u016d\u011d" +
    "\u016d\u011d\u016d\u011d\u016d\u011d\u016d\u011d\u016d\u011d\u016d" +
    "\u011d\u016d\u011d\u016d\u0121\001\u0121\001\u011d\u016d\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u011d\u023f\u010f\u0169\u010f\u016b\u010f\u016d\u010f\u016d\u010f" +
    "\u016d\u010f\u016d\u010f\u016d\u010f\u016d\u010f\u016d\u010f\u016d" +
    "\u010f\u016d\u010f\u016d\u010f\u016d\u010f\u016d\u010f\u016d\u010f" +
    "\u016d\u010f\u016d\u010f\u016d\u010f\u016d\u010f\u016d\u010f\u016d" +
    "\u010f\u016d\u010f\u016d\u010f\u016d\u010f\u016d\u010f\u016d\u0121" +
    "\001\u0121\001\u010f\u016d\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u010f\u0233\u010d\u0169\u010d" +
    "\u016b\u010d\u016d\u010d\u016d\u010d\u016d\u010d\u016d\u010d\u016d" +
    "\u010d\u016d\u010d\u016d\u010d\u016d\u010d\u016d\u010d\u016d\u010d" +
    "\u016d\u010d\u016d\u010d\u016d\u010d\u016d\u010d\u016d\u010d\u016d" +
    "\u010d\u016d\u010d\u016d\u010d\u016d\u010d\u016d\u010d\u016d\u010d" +
    "\u016d\u010d\u016d\u010d\u016d\u0121\001\u0121\001\u010d\u016d" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u010d\u0231\u010a\u0169\u010a\u016b\u010a\u016d\u010a\u016d" +
    "\u010a\u016d\u010a\u016d\u010a\u016d\u010a\u016d\u010a\u016d\u010a" +
    "\u016d\u010a\u016d\u010a\u016d\u010a\u016d\u010a\u016d\u010a\u016d" +
    "\u010a\u016d\u010a\u016d\u010a\u016d\u010a\u016d\u010a\u016d\u010a" +
    "\u016d\u010a\u016d\u010a\u016d\u010a\u016d\u010a\u016d\u010a\u016d" +
    "\u0121\001\u0121\001\u010a\u016d\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u010a\u022d\u0108\u0169" +
    "\u0108\u016b\u0108\u016d\u0108\u016d\u0108\u016d\u0108\u016d\u0108" +
    "\u016d\u0108\u016d\u0108\u016d\u0108\u016d\u0108\u016d\u0108\u016d" +
    "\u0108\u016d\u0108\u016d\u0108\u016d\u0108\u016d\u0108\u016d\u0108" +
    "\u016d\u0108\u016d\u0108\u016d\u0108\u016d\u0108\u016d\u0108\u016d" +
    "\u0108\u016d\u0108\u016d\u0108\u016d\u0121\001\u0121\001\u0108" +
    "\u016d\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0108\u022b\377\u0169\377\u016b\377\u016d\377" +
    "\u016d\377\u016d\377\u016d\377\u016d\377\u016d\377\u016d" +
    "\377\u016d\377\u016d\377\u016d\377\u016d\377\u016d\377" +
    "\u016d\377\u016d\377\u016d\377\u016d\377\u016d\377\u016d" +
    "\377\u016d\377\u016d\377\u016d\377\u016d\377\u016d\377" +
    "\u016d\u0121\001\u0121\001\377\u016d\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\377\316\374" +
    "\u0169\374\u016b\374\u016d\374\u016d\374\u016d\374\u016d" +
    "\374\u016d\374\u016d\374\u016d\374\u016d\374\u016d\374" +
    "\u016d\374\u016d\374\u016d\374\u016d\374\u016d\374\u016d" +
    "\374\u016d\374\u016d\374\u016d\374\u016d\374\u016d\374" +
    "\u016d\374\u016d\374\u016d\374\u016d\u0121\001\u0121\001" +
    "\374\u016d\u0121\001\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\374\316\373\u0169\373\u016b\373\u016d" +
    "\373\u016d\373\u016d\373\u016d\373\u016d\373\u016d\373" +
    "\u016d\373\u016d\373\u016d\373\u016d\373\u016d\373\u016d" +
    "\373\u016d\373\u016d\373\u016d\373\u016d\373\u016d\373" +
    "\u016d\373\u016d\373\u016d\373\u016d\373\u016d\373\u016d" +
    "\373\u016d\u0121\001\u0121\001\373\u016d\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\u0121\001\u0121\001\373\316" +
    "\270\u0169\270\u016b\270\u016d\270\u016d\270\u016d\270" +
    "\u016d\270\u016d\270\u016d\270\u016d\270\u016d\270\u016d" +
    "\270\u016d\270\u016d\270\u016d\270\u016d\270\u016d\270" +
    "\u016d\270\u016d\270\u016d\270\u016d\270\u016d\270\u016d" +
    "\270\u016d\270\u016d\270\u016d\270\u016d\u0121\001\u0121" +
    "\001\270\u016d\u0121\001\u0121\001\u0121\001\u0121\001" +
    "\u0121\001\u0121\001\270\u01af\177\357\177\357\177" +
    "\361\177\363\177\365\177\367\177\371\177\357" +
    "\177\357\177\357\177\373\177\375\177\357\177" +
    "\357\177\357\177\357\177\357\177\357\177\357" +
    "\177\357\177\357\177\357\177\357\177\357\177" +
    "\357\177\357\u0121\001\u0121\001\177\357\u0121\001" +
    "\u0121\001\u0121\001\u0121\001\u0121\001\u0121\001\177" +
    "\u015b\151\307\151\307\151\307\151\307\151\307" +
    "\151\307\151\307\151\311\151\313\151\315\151" +
    "\317\151\321\151\307\151\307\151\307\151\307" +
    "\151\307\151\307\151\307\151\307\151\307\151" +
    "\307\151\307\151\307\151\307\151\307\u0121\001" +
    "\u0121\001\151\307\u0121\001\u0121\001\u0121\001\u0121" +
    "\001\u0121\001\u0121\001\151\u013f\u0121\001\u02be\u01a9" +
    "\206\176\301\301\222\163\u024f\326\151\104\067" +
    "\063\210\365\222\301\u01aa\163\342\u02b6\324\245" +
    "\326\061\335\326\057\u02af\u01b3\045\304\206\052" +
    "\u0240\217\136\245\222\107\245\266\266\266\266" +
    "\266\133\133\327\100\216\075\336\067\u029e\326" +
    "\042\066\267\333\u017a\142\u010c\320\320\225\214" +
    "\302\162\245\065\225\310\231\056\u0178\304\u0167" +
    "\u0152\217\036\u023e\u0148\222\210\204\200\u0165\231" +
    "\037\u0142\231\320\044\270\223\157\220\u022f\107" +
    "\224\143\143\143\305\u01c2\316\064\143\367\304" +
    "\344\u0196\357\357\200\201\306\344\024\231\151" +
    "\266\266\266\266\266\276\202\344\u022d\u021e\u021c" +
    "\151\204\045\316\u0299\332\267\226\u020d\161\u0294" +
    "\072\u018b\351\002\212\062\165\152\167\167\051" +
    "\167\015\161\167\052\161\151\u018f\360\052\051" +
    "\152\114\037\152\004\177\u011b\u011b\004\u010f\u0110" +
    "\133\133\263\023\216\006\177\u027a\214\124\005" +
    "\000\161\u028e\213\u0289\167\167\021\167\147\152" +
    "\167\016\347\212\302\070\u0109\164\u0136\121\u0154" +
    "\u011c\177\256\u0133\112\052\001\052\134\125\014" +
    "\001\124\001\256\u0284\u0282\u027a\133\133\061\061" +
    "\216\313\u0244\001\325\u017c\001\127\u01fe\u01f9\313" +
    "\u01ef\u01ea\u01db\u01cc\001\313\313\u01c7\u0138\u0126\003" +
    "\u0121\166\001\313\313\001\001\376\001\001\u0273" +
    "\001\u026e\052\001\u0268\001\u025c\001\052\001\266" +
    "\266\266\266\266\347\347\235\242\u010f\u019e\133" +
    "\133\001\001\277\052\267\266\266\266\266\266" +
    "\266\266\266\266\266\001\133\133\001\001\277" +
    "\052\267\001\052\001\001\267\266\266\266\266" +
    "\266\001\061\061\052\354\354\355\u011d\u011e\052" +
    "\062\001\267\141\141\001\221\221\001\052\352" +
    "\052\211\211\001\u010d\u010e\001\001\001\u010a\u010b" +
    "\061\061\061\061\361\362\052\001\052\062\001" +
    "\062\141\141\141\141\u0108\u0109\001\061\061\061" +
    "\061\001\001\052\001\052\062\052\062\141\141" +
    "\141\141\204\205\360\061\061\061\061\133\133" +
    "\052\001\377\062\241\062\141\141\141\141\215" +
    "\241\203\133\133\001\001\216\001\241\241\266" +
    "\266\266\266\266\241\241\001\202\071\142\071" +
    "\071\071\071\071\001\330\001\001\102\001\102" +
    "\102\102\300\311\312\102\104\103\105\001\243" +
    "\244\143\143\143\001\052\001\001\143\001\052" +
    "\001\071\001\003\003\003\003\061\061\106\240" +
    "\001\061\061\052\001\062\001\001\u0107\u0107\062" +
    "\240\001\u0105\u0105\001\061\061\052\001\001\003" +
    "\001\052\001\062\001\001\u0104\u0104\001\061\061" +
    "\052\001\001\061\061\052\001\062\001\001\u0103" +
    "\u0103\062\061\061\u0102\u0102\001\061\061\052\001" +
    "\062\001\001\230\230\062\001\001\230\230\001" +
    "\061\061\052\001\052\001\001\001\001\062\001" +
    "\001\230\230\001\061\061\061\061\052\001\052" +
    "\001\001\062\001\062\230\230\230\230\001\061" +
    "\061\061\061\052\001\052\001\001\062\052\062" +
    "\230\230\230\230\001\061\061\061\061\052\001" +
    "\133\133\001\062\374\062\207\207\111\111\001" +
    "\061\061\266\266\266\266\266\001\001\062\001" +
    "\001\063\063\266\266\266\266\266\330\266\266" +
    "\266\266\266\266\266\266\266\266\052\330\266" +
    "\266\266\266\266\330\052\001\052\001\330\133" +
    "\133\052\001\372\001\330\052\133\133\133\133" +
    "\371\052\370\133\133\001\052\277\133\133\001" +
    "\052\337\001\133\133\001\001\277\133\133\001" +
    "\001\271\133\133\001\101\134\101\101\101\101" +
    "\101\073\001\073\073\073\073\073"
    };
  }

  /** Instance of action encapsulation class. */
  protected Action$ action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new Action$(this);
    }

  /** Invoke a user supplied parse action. */
  public com.github.jhoenicke.javacup.runtime.Symbol do_action(
    int                        act_num,
    java.util.ArrayList<com.github.jhoenicke.javacup.runtime.Symbol> stack)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$do_action(act_num, stack);
  }


  /** Scan to get the next Symbol. */
  public com.github.jhoenicke.javacup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }


	String filename;
	ParseEnvironment env;

	public static final Sort[] EMPTY_SORT_ARRAY = {};

	public void report_error(String s, Object sym) {
		String location;
		if (sym instanceof MySymbolFactory.LineColumnSymbol) {
			MySymbolFactory.LineColumnSymbol bsym = (MySymbolFactory.LineColumnSymbol) sym;
			location = bsym.getLocation();
		} else if ((sym instanceof Symbol)
				   && ((Symbol)sym).sym == LexerSymbols.EOF) {
			location = "EOF";
		} else
			location = "UNKNOWN";

		action_obj.setError(filename+":"+location+": "+s);
	}

	public void report_error(String s) {
		report_error(s, cur_token);
	}

	public void syntax_error(Symbol sym) {
		report_error("Syntax Error", sym);
		env.printError(action_obj.getError());
	}

	public void setFileName(String filename) {
		this.filename = filename;
	}

	public void setParseEnvironment(ParseEnvironment env) {
		this.env = env;
	}


/** Cup generated class to encapsulate user supplied action code.*/
static class Action$ {


	ScopedHashMap<String,TermVariable> localVars =
		new ScopedHashMap<String, TermVariable>(false);
	Sort[] sortParams = null;
	static Sort[] emptySortArray = new Sort[0];

	static class Binding {
		TermVariable mVar;
		Term mTerm;
		public Binding(TermVariable var, Term term) {
			mVar = var;
			mTerm = term;
		}
		TermVariable getVar() {
			return mVar;
		}
		Term getTerm() {
			return mTerm;
		}
	}

	static class IndexedIdentifier {
		String mName;
		BigInteger[] mIndices;
		public IndexedIdentifier(String name, BigInteger[] indices) {
			mName = name;
			mIndices = indices;
		}
		public String getName() {
			return mName;
		}
		public BigInteger[] getIndices() {
			return mIndices;
		}

		public String toString() {
			if (mIndices == null)
				return mName;
			return "(_ "+mName+" "+Arrays.toString(mIndices)+")";
		}
	}

	static class QualIdentifier {
		String mName;
		BigInteger[] mIndices;
		Sort mSort;
		public QualIdentifier(IndexedIdentifier id, Sort sort) {
			mName = id.getName();
			mIndices = id.getIndices();
			mSort = sort;
		}
		public String getIdentifier() {
			return mName;
		}
		public BigInteger[] getIndices() {
			return mIndices;
		}
		public Sort getSort() {
			return mSort;
		}

		public String toString() {
			String indexedId;
			if (mIndices == null)
				indexedId = mName;
			else
				indexedId = "(_ "+mName+" "+Arrays.toString(mIndices)+")";
			if (mSort == null)
				return indexedId;
			return "(as " + indexedId + " " + mSort + ")";
		}
	}

	String errorMessage;
	public void setError(String message) {
		if (errorMessage == null)
			errorMessage = message;
	}
	public boolean hasError() {
		return errorMessage != null;
	}
	public String getError() {
		String result = errorMessage;
		errorMessage = null;
		return result;
	}

	public Sort lookupSort(Symbol sym, IndexedIdentifier id, Sort[] args) {
		for (Sort s: args) {
			if (s == null) return null;
		}
		String name = id.getName();
		if (args.length == 0 && id.getIndices() == null && sortParams != null) {
			for (Sort s: sortParams) {
				if (s.getName().equals(name))
					return s;
			}
		}
		try {
			return parser.env.getScript().sort(name, id.getIndices(), args);
		} catch (SMTLIBException se) {
			parser.report_error("Undeclared sort ("+id+" "+args.length+")", sym);
		}
		return null;
	}

	public Term createTerm(Symbol fsym, String name, BigInteger[] indices, Sort resultSort, Term[] param) {
		// check if there was an error when creating the child term.
		for (Term p : param) {
			if (p == null)
				return null;
		}
		try {
			return parser.env.getScript().term(name, indices, resultSort, param);
		} catch (SMTLIBException se) {
			parser.report_error(se.getMessage(), fsym);
		}
		return null;
	}

	public TermVariable createTermVariable(String name, Sort sort) {
		if (sort == null)
			return null;
		try {
			TermVariable tv = parser.env.getScript().variable(name, sort);
			localVars.put(tv.getName(), tv);
			return tv;
		} catch (SMTLIBException cannotHappen) {}
		// Actually unreachable
		throw new AssertionError();
	}

	private Term getTermVariable(String name) {
		return localVars.get(name);
	}

	public Term annotateTerm(Term term, Annotation[] annots) {
		if (term == null)
			return null;
		try {
			return parser.env.getScript().annotate(term, annots);
		} catch (SMTLIBException se) {
			parser.report_error(se.getMessage());
		}
		return null;
	}

  private final Parser parser;

  /** Constructor */
  Action$(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  @SuppressWarnings({ "unused", "unchecked" })
  public final com.github.jhoenicke.javacup.runtime.Symbol CUP$do_action(
    int                        CUP$act_num,
    java.util.ArrayList<com.github.jhoenicke.javacup.runtime.Symbol> CUP$stack)
    throws java.lang.Exception
    {
      /* Stack size for peeking into the stack */
      int CUP$size = CUP$stack.size();

      /* select the action based on the action number */
      switch (CUP$act_num)
        {
          // $START ::= goal EOF 
          case 0:
            {
              Object RESULT;
RESULT = null;
/* ACCEPT */
parser.done_parsing();
              return parser.getSymbolFactory().newSymbol("$START", 0, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // specConstant ::= NUMERAL 
          case 1:
            {
              Object RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol n$ = CUP$stack.get(CUP$size - 1);
              BigInteger n = (BigInteger) n$.value;
 RESULT = n; 
              return parser.getSymbolFactory().newSymbol("specConstant", 17, n$, n$, RESULT);
            }

          // specConstant ::= DECIMAL 
          case 2:
            {
              Object RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol n$ = CUP$stack.get(CUP$size - 1);
              BigDecimal n = (BigDecimal) n$.value;
 RESULT = n; 
              return parser.getSymbolFactory().newSymbol("specConstant", 17, n$, n$, RESULT);
            }

          // specConstant ::= HEXADECIMAL 
          // specConstant ::= BINARY 
          case 3:
            {
              Object RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol n$ = CUP$stack.get(CUP$size - 1);
              String n = (String) n$.value;
 RESULT = n; 
              return parser.getSymbolFactory().newSymbol("specConstant", 17, n$, n$, RESULT);
            }

          // specConstant ::= STRING 
          case 4:
            {
              Object RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol n$ = CUP$stack.get(CUP$size - 1);
              String n = (String) n$.value;
 RESULT = new QuotedObject(n); 
              return parser.getSymbolFactory().newSymbol("specConstant", 17, n$, n$, RESULT);
            }

          // sExpr ::= LPAR sExpr* RPAR 
          case 5:
            {
              Object RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol s$ = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<Object> CUP$list$s = (java.util.ArrayList<Object>) s$.value;
              Object[] s = CUP$list$s.toArray(new Object[CUP$list$s.size()]);
 RESULT = s; 
              return parser.getSymbolFactory().newSymbol("sExpr", 18, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // constantTerm ::= NUMERAL 
          case 6:
            {
              Term RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol n$ = CUP$stack.get(CUP$size - 1);
              BigInteger n = (BigInteger) n$.value;
 try {
					RESULT = parser.env.getScript().numeral(n);
					} catch (SMTLIBException se) {
						parser.report_error(se.getMessage());
						RESULT = null;
					} 
              return parser.getSymbolFactory().newSymbol("constantTerm", 27, n$, n$, RESULT);
            }

          // constantTerm ::= DECIMAL 
          case 7:
            {
              Term RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol n$ = CUP$stack.get(CUP$size - 1);
              BigDecimal n = (BigDecimal) n$.value;
 try {
             		RESULT = parser.env.getScript().decimal(n);
             		} catch (SMTLIBException se) {
             			parser.report_error(se.getMessage());
             			RESULT = null;
             		} 
              return parser.getSymbolFactory().newSymbol("constantTerm", 27, n$, n$, RESULT);
            }

          // constantTerm ::= HEXADECIMAL 
          case 8:
            {
              Term RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol n$ = CUP$stack.get(CUP$size - 1);
              String n = (String) n$.value;
 try {
             		RESULT = parser.env.getScript().hexadecimal(n);
             		} catch (SMTLIBException se) {
             			parser.report_error(se.getMessage());
             			RESULT = null;
             		}  
              return parser.getSymbolFactory().newSymbol("constantTerm", 27, n$, n$, RESULT);
            }

          // constantTerm ::= BINARY 
          case 9:
            {
              Term RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol n$ = CUP$stack.get(CUP$size - 1);
              String n = (String) n$.value;
 try {
             		RESULT = parser.env.getScript().binary(n);
             		} catch (SMTLIBException se) {
             			parser.report_error(se.getMessage());
             			RESULT = null;
             		} 
              return parser.getSymbolFactory().newSymbol("constantTerm", 27, n$, n$, RESULT);
            }

          // constantTerm ::= STRING 
          case 10:
            {
              Term RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol n$ = CUP$stack.get(CUP$size - 1);
              String n = (String) n$.value;
 try {
                    RESULT = parser.env.getScript().string(n);
             		} catch (SMTLIBException se) {
             			parser.report_error(se.getMessage());
             			RESULT = null;
             		} 
              return parser.getSymbolFactory().newSymbol("constantTerm", 27, n$, n$, RESULT);
            }

          // identifierIndexed ::= LPAR UNDERSCORE symbol NUMERAL+ RPAR 
          case 11:
            {
              IndexedIdentifier RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol indices$ = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<BigInteger> CUP$list$indices = (java.util.ArrayList<BigInteger>) indices$.value;
              BigInteger[] indices = CUP$list$indices.toArray(new BigInteger[CUP$list$indices.size()]);
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 3);
              String id = (String) id$.value;
 RESULT = new IndexedIdentifier(id, indices); 
              return parser.getSymbolFactory().newSymbol("identifierIndexed", 16, CUP$stack.get(CUP$size - 5), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // identifier ::= symbol 
          case 12:
            {
              IndexedIdentifier RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol s$ = CUP$stack.get(CUP$size - 1);
              String s = (String) s$.value;
 RESULT = new IndexedIdentifier(s, null); 
              return parser.getSymbolFactory().newSymbol("identifier", 15, s$, s$, RESULT);
            }

          // sort ::= identifier 
          case 13:
            {
              Sort RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              IndexedIdentifier id = (IndexedIdentifier) id$.value;
 RESULT = lookupSort(id$, id, emptySortArray); 
              return parser.getSymbolFactory().newSymbol("sort", 19, id$, id$, RESULT);
            }

          // sort ::= LPAR identifier sort+ RPAR 
          case 14:
            {
              Sort RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol sorts$ = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<Sort> CUP$list$sorts = (java.util.ArrayList<Sort>) sorts$.value;
              Sort[] sorts = CUP$list$sorts.toArray(new Sort[CUP$list$sorts.size()]);
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 3);
              IndexedIdentifier id = (IndexedIdentifier) id$.value;
 RESULT = lookupSort(id$, id, sorts); 
              return parser.getSymbolFactory().newSymbol("sort", 19, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // attribute ::= keywordNoAttr attributeValue? 
          case 15:
            {
              Annotation RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol v$ = CUP$stack.get(CUP$size - 1);
              Object v = (Object) v$.value;
              com.github.jhoenicke.javacup.runtime.Symbol k$ = CUP$stack.get(CUP$size - 2);
              String k = (String) k$.value;
 RESULT = new Annotation(k, v); 
              return parser.getSymbolFactory().newSymbol("attribute", 21, k$, v$, RESULT);
            }

          // attribute ::= CNAMED symbol 
          case 16:
            {
              Annotation RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol v$ = CUP$stack.get(CUP$size - 1);
              String v = (String) v$.value;
              com.github.jhoenicke.javacup.runtime.Symbol k$ = CUP$stack.get(CUP$size - 2);
              String k = (String) k$.value;
 RESULT = new Annotation(k, v); 
              return parser.getSymbolFactory().newSymbol("attribute", 21, k$, v$, RESULT);
            }

          // attribute ::= CPATTERN LPAR term* RPAR 
          case 17:
            {
              Annotation RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol t$ = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<Term> CUP$list$t = (java.util.ArrayList<Term>) t$.value;
              Term[] t = CUP$list$t.toArray(new Term[CUP$list$t.size()]);
              com.github.jhoenicke.javacup.runtime.Symbol k$ = CUP$stack.get(CUP$size - 4);
              String k = (String) k$.value;
 RESULT = new Annotation(k, t); 
              return parser.getSymbolFactory().newSymbol("attribute", 21, k$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // attributeValue ::= LPAR sExpr* RPAR 
          case 18:
            {
              Object RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol s$ = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<Object> CUP$list$s = (java.util.ArrayList<Object>) s$.value;
              Object[] s = CUP$list$s.toArray(new Object[CUP$list$s.size()]);
 RESULT = s; 
              return parser.getSymbolFactory().newSymbol("attributeValue", 20, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // attributeLogic ::= keywordNoLogic attributeValue? 
          case 19:
            {
              Annotation RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol v$ = CUP$stack.get(CUP$size - 1);
              Object v = (Object) v$.value;
              com.github.jhoenicke.javacup.runtime.Symbol k$ = CUP$stack.get(CUP$size - 2);
              String k = (String) k$.value;
 RESULT = new Annotation(k, v); 
              return parser.getSymbolFactory().newSymbol("attributeLogic", 23, k$, v$, RESULT);
            }

          // attributeTheory ::= keywordNoTheory attributeValue? 
          case 20:
            {
              Annotation RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol v$ = CUP$stack.get(CUP$size - 1);
              Object v = (Object) v$.value;
              com.github.jhoenicke.javacup.runtime.Symbol k$ = CUP$stack.get(CUP$size - 2);
              String k = (String) k$.value;
 RESULT = new Annotation(k, v); 
              return parser.getSymbolFactory().newSymbol("attributeTheory", 22, k$, v$, RESULT);
            }

          // qualIdentifier ::= identifier 
          case 21:
            {
              QualIdentifier RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol i$ = CUP$stack.get(CUP$size - 1);
              IndexedIdentifier i = (IndexedIdentifier) i$.value;
 RESULT = new QualIdentifier(i, null); 
              return parser.getSymbolFactory().newSymbol("qualIdentifier", 24, i$, i$, RESULT);
            }

          // qualIdentifier ::= LPAR AS identifier sort RPAR 
          case 22:
            {
              QualIdentifier RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol s$ = CUP$stack.get(CUP$size - 2);
              Sort s = (Sort) s$.value;
              com.github.jhoenicke.javacup.runtime.Symbol i$ = CUP$stack.get(CUP$size - 3);
              IndexedIdentifier i = (IndexedIdentifier) i$.value;
 RESULT = new QualIdentifier(i, s); 
              return parser.getSymbolFactory().newSymbol("qualIdentifier", 24, CUP$stack.get(CUP$size - 5), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // varBinding ::= LPAR symbol term RPAR 
          case 23:
            {
              Binding RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol t$ = CUP$stack.get(CUP$size - 2);
              Term t = (Term) t$.value;
              com.github.jhoenicke.javacup.runtime.Symbol sym$ = CUP$stack.get(CUP$size - 3);
              String sym = (String) sym$.value;
 if (hasError()) {
            	RESULT = null;
            } else {
         		TermVariable tv = createTermVariable(sym, t.getSort());
            	RESULT = new Binding(tv, t);
            }
          
              return parser.getSymbolFactory().newSymbol("varBinding", 25, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // sortedVar ::= LPAR symbol sort RPAR 
          case 24:
            {
              TermVariable RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol s$ = CUP$stack.get(CUP$size - 2);
              Sort s = (Sort) s$.value;
              com.github.jhoenicke.javacup.runtime.Symbol sym$ = CUP$stack.get(CUP$size - 3);
              String sym = (String) sym$.value;
 RESULT = createTermVariable(sym, s); 
              return parser.getSymbolFactory().newSymbol("sortedVar", 26, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // term ::= qualIdentifier 
          case 25:
            {
              Term RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol fun$ = CUP$stack.get(CUP$size - 1);
              QualIdentifier fun = (QualIdentifier) fun$.value;
 RESULT = fun.getIndices() == null && fun.getSort() == null ? getTermVariable(fun.getIdentifier()) : null;
            if (RESULT == null)
                RESULT = createTerm(fun$, fun.getIdentifier(), fun.getIndices(), fun.getSort(), new Term[0]); 
              return parser.getSymbolFactory().newSymbol("term", 28, fun$, fun$, RESULT);
            }

          // term ::= LPAR qualIdentifier term+ RPAR 
          case 26:
            {
              Term RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol args$ = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<Term> CUP$list$args = (java.util.ArrayList<Term>) args$.value;
              Term[] args = CUP$list$args.toArray(new Term[CUP$list$args.size()]);
              com.github.jhoenicke.javacup.runtime.Symbol fun$ = CUP$stack.get(CUP$size - 3);
              QualIdentifier fun = (QualIdentifier) fun$.value;
 RESULT = createTerm(fun$, fun.getIdentifier(), fun.getIndices(), fun.getSort(), args); 
              return parser.getSymbolFactory().newSymbol("term", 28, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // term ::= LPAR LET NT$0 LPAR varBinding+ RPAR term RPAR 
          case 27:
            {
              Term RESULT = (Term) CUP$stack.get(CUP$size - 6).value;
              com.github.jhoenicke.javacup.runtime.Symbol t$ = CUP$stack.get(CUP$size - 2);
              Term t = (Term) t$.value;
              com.github.jhoenicke.javacup.runtime.Symbol bindings$ = CUP$stack.get(CUP$size - 4);
              java.util.ArrayList<Binding> CUP$list$bindings = (java.util.ArrayList<Binding>) bindings$.value;
              Binding[] bindings = CUP$list$bindings.toArray(new Binding[CUP$list$bindings.size()]);
 TermVariable[] vars = new TermVariable[bindings.length];
            Term[] terms = new Term[bindings.length];
            for (int i = 0; i < bindings.length; i++) {
            	if (bindings[i] != null) {
               		vars[i] = bindings[i].getVar();
               		terms[i] = bindings[i].getTerm();
               	}
            }
            localVars.endScope();
            if (hasError())
            	RESULT = null;
            else
            	RESULT = parser.env.getScript().let(vars, terms, t); 
              return parser.getSymbolFactory().newSymbol("term", 28, CUP$stack.get(CUP$size - 8), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // NT$0 ::= 
          case 28:
            {
              Term RESULT = null;
 localVars.beginScope(); 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("NT$0", 53, CUP$sym, CUP$sym, RESULT);
            }

          // term ::= LPAR FORALL NT$1 LPAR sortedVar+ RPAR term RPAR 
          case 29:
            {
              Term RESULT = (Term) CUP$stack.get(CUP$size - 6).value;
              com.github.jhoenicke.javacup.runtime.Symbol t$ = CUP$stack.get(CUP$size - 2);
              Term t = (Term) t$.value;
              com.github.jhoenicke.javacup.runtime.Symbol vars$ = CUP$stack.get(CUP$size - 4);
              java.util.ArrayList<TermVariable> CUP$list$vars = (java.util.ArrayList<TermVariable>) vars$.value;
              TermVariable[] vars = CUP$list$vars.toArray(new TermVariable[CUP$list$vars.size()]);
              com.github.jhoenicke.javacup.runtime.Symbol sym$ = CUP$stack.get(CUP$size - 7);
              String sym = (String) sym$.value;
 localVars.endScope();
           	RESULT = null;
			try {
            	if (!hasError())
            		RESULT = parser.env.getScript().quantifier(Script.FORALL, vars, t);
			} catch (SMTLIBException se) {
				parser.report_error(se.getMessage(), sym$);
			} 
              return parser.getSymbolFactory().newSymbol("term", 28, CUP$stack.get(CUP$size - 8), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // NT$1 ::= 
          case 30:
            {
              Term RESULT = null;
              com.github.jhoenicke.javacup.runtime.Symbol sym$ = CUP$stack.get(CUP$size - 1);
              String sym = (String) sym$.value;
 localVars.beginScope(); 
              return parser.getSymbolFactory().newSymbol("NT$1", 55, CUP$stack.get(CUP$size - 2), sym$, RESULT);
            }

          // term ::= LPAR EXISTS NT$2 LPAR sortedVar+ RPAR term RPAR 
          case 31:
            {
              Term RESULT = (Term) CUP$stack.get(CUP$size - 6).value;
              com.github.jhoenicke.javacup.runtime.Symbol t$ = CUP$stack.get(CUP$size - 2);
              Term t = (Term) t$.value;
              com.github.jhoenicke.javacup.runtime.Symbol vars$ = CUP$stack.get(CUP$size - 4);
              java.util.ArrayList<TermVariable> CUP$list$vars = (java.util.ArrayList<TermVariable>) vars$.value;
              TermVariable[] vars = CUP$list$vars.toArray(new TermVariable[CUP$list$vars.size()]);
              com.github.jhoenicke.javacup.runtime.Symbol sym$ = CUP$stack.get(CUP$size - 7);
              String sym = (String) sym$.value;
 localVars.endScope();
           	RESULT = null;
			try {
            	if (!hasError())
            		RESULT = parser.env.getScript().quantifier(Script.EXISTS, vars, t);
			} catch (SMTLIBException se) {
				parser.report_error(se.getMessage(), sym$);
			} 
              return parser.getSymbolFactory().newSymbol("term", 28, CUP$stack.get(CUP$size - 8), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // NT$2 ::= 
          case 32:
            {
              Term RESULT = null;
              com.github.jhoenicke.javacup.runtime.Symbol sym$ = CUP$stack.get(CUP$size - 1);
              String sym = (String) sym$.value;
 localVars.beginScope(); 
              return parser.getSymbolFactory().newSymbol("NT$2", 56, CUP$stack.get(CUP$size - 2), sym$, RESULT);
            }

          // term ::= LPAR BANG term attribute+ RPAR 
          case 33:
            {
              Term RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol attr$ = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<Annotation> CUP$list$attr = (java.util.ArrayList<Annotation>) attr$.value;
              Annotation[] attr = CUP$list$attr.toArray(new Annotation[CUP$list$attr.size()]);
              com.github.jhoenicke.javacup.runtime.Symbol t$ = CUP$stack.get(CUP$size - 3);
              Term t = (Term) t$.value;
 RESULT = annotateTerm(t, attr); 
              return parser.getSymbolFactory().newSymbol("term", 28, CUP$stack.get(CUP$size - 5), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // sortSymbolDecl ::= LPAR identifier NUMERAL attribute* RPAR 
          case 34:
            {
              return parser.getSymbolFactory().newSymbol("sortSymbolDecl", 30, CUP$stack.get(CUP$size - 5), CUP$stack.get(CUP$size - 1));
            }

          // funSymbolDecl ::= LPAR specConstant sort attribute* RPAR 
          // funSymbolDecl ::= LPAR metaSpecConstant sort attribute* RPAR 
          // funSymbolDecl ::= LPAR identifier sort+ attribute* RPAR 
          case 35:
            {
              return parser.getSymbolFactory().newSymbol("funSymbolDecl", 33, CUP$stack.get(CUP$size - 5), CUP$stack.get(CUP$size - 1));
            }

          // parFunSymbolDecl ::= LPAR PAR LPAR symbol+ RPAR LPAR identifier sort+ attribute* RPAR RPAR 
          case 36:
            {
              return parser.getSymbolFactory().newSymbol("parFunSymbolDecl", 32, CUP$stack.get(CUP$size - 11), CUP$stack.get(CUP$size - 1));
            }

          // theoryAttribute ::= CSORTS LPAR sortSymbolDecl+ RPAR 
          // theoryAttribute ::= CFUNS LPAR parFunSymbolDecl+ RPAR 
          case 37:
            {
              return parser.getSymbolFactory().newSymbol("theoryAttribute", 34, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // theoryAttribute ::= CSORTSDESCRIPTION STRING 
          // theoryAttribute ::= CFUNSDESCRIPTION STRING 
          // theoryAttribute ::= CDEFINITION STRING 
          // theoryAttribute ::= CVALUES STRING 
          // theoryAttribute ::= CNOTES STRING 
          case 38:
            {
              return parser.getSymbolFactory().newSymbol("theoryAttribute", 34, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // theoryDecl ::= LPAR THEORY symbol theoryAttribute+ RPAR 
          case 39:
            {
              return parser.getSymbolFactory().newSymbol("theoryDecl", 42, CUP$stack.get(CUP$size - 5), CUP$stack.get(CUP$size - 1));
            }

          // logicAttribute ::= CTHEORIES LPAR symbol+ RPAR 
          case 40:
            {
              return parser.getSymbolFactory().newSymbol("logicAttribute", 35, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // logicAttribute ::= CLANGUAGE STRING 
          // logicAttribute ::= CEXTENSIONS STRING 
          // logicAttribute ::= CVALUES STRING 
          // logicAttribute ::= CNOTES STRING 
          case 41:
            {
              return parser.getSymbolFactory().newSymbol("logicAttribute", 35, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // logic ::= LPAR LOGIC symbol logicAttribute+ RPAR 
          case 42:
            {
              return parser.getSymbolFactory().newSymbol("logic", 43, CUP$stack.get(CUP$size - 5), CUP$stack.get(CUP$size - 1));
            }

          // bValue ::= TRUE 
          case 43:
            {
              Boolean RESULT;
 RESULT = true; 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("bValue", 36, CUP$sym, CUP$sym, RESULT);
            }

          // bValue ::= FALSE 
          case 44:
            {
              Boolean RESULT;
 RESULT = false; 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("bValue", 36, CUP$sym, CUP$sym, RESULT);
            }

          // option ::= booleanOption bValue 
          case 45:
            {
              com.github.jhoenicke.javacup.runtime.Symbol b$ = CUP$stack.get(CUP$size - 1);
              Boolean b = (Boolean) b$.value;
              com.github.jhoenicke.javacup.runtime.Symbol o$ = CUP$stack.get(CUP$size - 2);
              String o = (String) o$.value;
 try {
           		parser.env.getScript().setOption(o, b);
           		parser.env.printSuccess();
           	} catch (UnsupportedOperationException uoe) {
           		parser.env.printResponse("unsupported");
           	} catch (SMTLIBException se) {
           		parser.env.printError(se.getMessage());
           	} 
              return parser.getSymbolFactory().newSymbol("option", 37, o$, b$);
            }

          // option ::= stringOption STRING 
          case 46:
            {
              com.github.jhoenicke.javacup.runtime.Symbol s$ = CUP$stack.get(CUP$size - 1);
              String s = (String) s$.value;
              com.github.jhoenicke.javacup.runtime.Symbol o$ = CUP$stack.get(CUP$size - 2);
              String o = (String) o$.value;
 try {
           		parser.env.getScript().setOption(o, s);
           		parser.env.printSuccess();
           	} catch (UnsupportedOperationException uoe) {
           		parser.env.printResponse("unsupported");
           	} catch (SMTLIBException se) {
           		parser.env.printError(se.getMessage());
           	}
              return parser.getSymbolFactory().newSymbol("option", 37, o$, s$);
            }

          // option ::= numeralOption NUMERAL 
          case 47:
            {
              com.github.jhoenicke.javacup.runtime.Symbol n$ = CUP$stack.get(CUP$size - 1);
              BigInteger n = (BigInteger) n$.value;
              com.github.jhoenicke.javacup.runtime.Symbol o$ = CUP$stack.get(CUP$size - 2);
              String o = (String) o$.value;
 try {
           		parser.env.getScript().setOption(o, n);
           		parser.env.printSuccess();
           	} catch (UnsupportedOperationException uoe) {
           		parser.env.printResponse("unsupported");
           	} catch (SMTLIBException se) {
           		parser.env.printError(se.getMessage());
           	}
              return parser.getSymbolFactory().newSymbol("option", 37, o$, n$);
            }

          // option ::= keywordNoOption attributeValue? 
          case 48:
            {
              com.github.jhoenicke.javacup.runtime.Symbol v$ = CUP$stack.get(CUP$size - 1);
              Object v = (Object) v$.value;
              com.github.jhoenicke.javacup.runtime.Symbol k$ = CUP$stack.get(CUP$size - 2);
              String k = (String) k$.value;
 try {
           		parser.env.getScript().setOption(k, v);
           		parser.env.printSuccess();
           	} catch (UnsupportedOperationException uoe) {
           		parser.env.printResponse("unsupported");
           	} catch (SMTLIBException se) {
           		parser.env.printError(se.getMessage());
           	} 
              return parser.getSymbolFactory().newSymbol("option", 37, k$, v$);
            }

          // interpolantpartition ::= interpolantpartition SYMBOL 
          case 49:
            {
              InterpolationInfo RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol symb$ = CUP$stack.get(CUP$size - 1);
              String symb = (String) symb$.value;
              com.github.jhoenicke.javacup.runtime.Symbol child$ = CUP$stack.get(CUP$size - 2);
              InterpolationInfo child = (InterpolationInfo) child$.value;
 if (child.isEmpty() && symb.equals("and"))
                   child.makeAndTerm();
                else
                   child.addParent(createTerm(symb$, symb, null, null, new Term[0]));
                RESULT = child;
              return parser.getSymbolFactory().newSymbol("interpolantpartition", 29, child$, symb$, RESULT);
            }

          // interpolantpartition ::= interpolantpartition LPAR interpolantpartition RPAR 
          case 50:
            {
              InterpolationInfo RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol sibling$ = CUP$stack.get(CUP$size - 2);
              InterpolationInfo sibling = (InterpolationInfo) sibling$.value;
              com.github.jhoenicke.javacup.runtime.Symbol child$ = CUP$stack.get(CUP$size - 4);
              InterpolationInfo child = (InterpolationInfo) child$.value;
 if (sibling.isAndTerm() && !hasError()) {
             	    child.addParent(parser.env.getScript()
             	    				.term("and", sibling.getPartition()));
                } else if (child.isClosedTree()) {
				    child.addSibling(sibling);
				} else {
					parser.report_error("Interpolation tree malformed.", child$);
				}
                RESULT = child; 
              return parser.getSymbolFactory().newSymbol("interpolantpartition", 29, child$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // interpolantpartition ::= 
          case 51:
            {
              InterpolationInfo RESULT;
 RESULT = new InterpolationInfo(); 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("interpolantpartition", 29, CUP$sym, CUP$sym, RESULT);
            }

          // command ::= SETLOGIC symbol 
          case 52:
            {
              com.github.jhoenicke.javacup.runtime.Symbol logic$ = CUP$stack.get(CUP$size - 1);
              String logic = (String) logic$.value;
 try {
            	parser.env.getScript().setLogic(logic);
            	parser.env.printSuccess();
            } catch (UnsupportedOperationException uoe) {
            	parser.env.printResponse("unsupported");
            } catch (SMTLIBException se) {
				parser.report_error(se.getMessage(), logic$);
				parser.env.printError(getError());
            }
             
              return parser.getSymbolFactory().newSymbol("command", 39, CUP$stack.get(CUP$size - 2), logic$);
            }

          // command ::= SETOPTION option 
          case 53:
            {
              com.github.jhoenicke.javacup.runtime.Symbol opt$ = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("command", 39, CUP$stack.get(CUP$size - 2), opt$);
            }

          // command ::= SETINFO keyword attributeValue? 
          case 54:
            {
              com.github.jhoenicke.javacup.runtime.Symbol v$ = CUP$stack.get(CUP$size - 1);
              Object v = (Object) v$.value;
              com.github.jhoenicke.javacup.runtime.Symbol k$ = CUP$stack.get(CUP$size - 2);
              String k = (String) k$.value;
 parser.env.setInfo(k, v);
            parser.env.printSuccess(); 
              return parser.getSymbolFactory().newSymbol("command", 39, CUP$stack.get(CUP$size - 3), v$);
            }

          // command ::= DECLARESORT symbol NUMERAL 
          case 55:
            {
              com.github.jhoenicke.javacup.runtime.Symbol n$ = CUP$stack.get(CUP$size - 1);
              BigInteger n = (BigInteger) n$.value;
              com.github.jhoenicke.javacup.runtime.Symbol sort$ = CUP$stack.get(CUP$size - 2);
              String sort = (String) sort$.value;

				if (n.bitLength() >= 32)
					parser.report_error("sort has too many arguments", n$);
				if (hasError())
					parser.env.printError(getError());
				else {
					try {
						parser.env.getScript().declareSort(sort, n.intValue());
						parser.env.printSuccess();
					} catch (SMTLIBException se) {
						parser.report_error(se.getMessage(), sort$);
						parser.env.printError(getError());
					}
				}
			
              return parser.getSymbolFactory().newSymbol("command", 39, CUP$stack.get(CUP$size - 3), n$);
            }

          // command ::= DEFINESORT symbol LPAR symbol* NT$3 RPAR sort 
          case 56:
            {
              com.github.jhoenicke.javacup.runtime.Symbol def$ = CUP$stack.get(CUP$size - 1);
              Sort def = (Sort) def$.value;
              com.github.jhoenicke.javacup.runtime.Symbol sortVars$ = CUP$stack.get(CUP$size - 4);
              java.util.ArrayList<String> CUP$list$sortVars = (java.util.ArrayList<String>) sortVars$.value;
              String[] sortVars = CUP$list$sortVars.toArray(new String[CUP$list$sortVars.size()]);
              com.github.jhoenicke.javacup.runtime.Symbol sort$ = CUP$stack.get(CUP$size - 6);
              String sort = (String) sort$.value;
 if (hasError())
            	   parser.env.printError(getError());
               else {
                   try {
                   		parser.env.getScript().defineSort(sort, sortParams, def);
                   		parser.env.printSuccess();
                   } catch (SMTLIBException se) {
                   		parser.report_error(se.getMessage(), sort$);
                   		parser.env.printError(getError());
                   }
               }
            
              return parser.getSymbolFactory().newSymbol("command", 39, CUP$stack.get(CUP$size - 7), def$);
            }

          // NT$3 ::= 
          case 57:
            {
              com.github.jhoenicke.javacup.runtime.Symbol sortVars$ = CUP$stack.get(CUP$size - 1);
              java.util.ArrayList<String> CUP$list$sortVars = (java.util.ArrayList<String>) sortVars$.value;
              String[] sortVars = CUP$list$sortVars.toArray(new String[CUP$list$sortVars.size()]);
              com.github.jhoenicke.javacup.runtime.Symbol sort$ = CUP$stack.get(CUP$size - 3);
              String sort = (String) sort$.value;
 sortParams = parser.env.getScript().sortVariables(sortVars); 
              return parser.getSymbolFactory().newSymbol("NT$3", 65, CUP$stack.get(CUP$size - 4), sortVars$);
            }

          // command ::= DECLAREFUN symbol LPAR sort* RPAR sort 
          case 58:
            {
              com.github.jhoenicke.javacup.runtime.Symbol result$ = CUP$stack.get(CUP$size - 1);
              Sort result = (Sort) result$.value;
              com.github.jhoenicke.javacup.runtime.Symbol param$ = CUP$stack.get(CUP$size - 3);
              java.util.ArrayList<Sort> CUP$list$param = (java.util.ArrayList<Sort>) param$.value;
              Sort[] param = CUP$list$param.toArray(new Sort[CUP$list$param.size()]);
              com.github.jhoenicke.javacup.runtime.Symbol fun$ = CUP$stack.get(CUP$size - 5);
              String fun = (String) fun$.value;
 if (hasError())
            	   parser.env.printError(getError());
               else {
                   try {
                   		parser.env.getScript().declareFun(fun, param, result);
                   		parser.env.printSuccess();
                   } catch (SMTLIBException se) {
                   		parser.report_error(se.getMessage(), fun$);
                   		parser.env.printError(getError());
                   }
               }
            
              return parser.getSymbolFactory().newSymbol("command", 39, CUP$stack.get(CUP$size - 6), result$);
            }

          // command ::= DECLARECONST symbol sort 
          case 59:
            {
              com.github.jhoenicke.javacup.runtime.Symbol result$ = CUP$stack.get(CUP$size - 1);
              Sort result = (Sort) result$.value;
              com.github.jhoenicke.javacup.runtime.Symbol fun$ = CUP$stack.get(CUP$size - 2);
              String fun = (String) fun$.value;
  if (hasError())
                    parser.env.printError(getError());
                else {
                    try {
                        parser.env.getScript().declareFun(fun, Script.EMPTY_SORT_ARRAY, result);
                        parser.env.printSuccess();
                    } catch(SMTLIBException se) {
                        parser.report_error(se.getMessage(), fun$);
                        parser.env.printError(getError());
                    }
               }
            
              return parser.getSymbolFactory().newSymbol("command", 39, CUP$stack.get(CUP$size - 3), result$);
            }

          // command ::= DEFINEFUN NT$4 symbol LPAR sortedVar* RPAR sort term 
          case 60:
            {
              com.github.jhoenicke.javacup.runtime.Symbol value$ = CUP$stack.get(CUP$size - 1);
              Term value = (Term) value$.value;
              com.github.jhoenicke.javacup.runtime.Symbol resultSort$ = CUP$stack.get(CUP$size - 2);
              Sort resultSort = (Sort) resultSort$.value;
              com.github.jhoenicke.javacup.runtime.Symbol param$ = CUP$stack.get(CUP$size - 4);
              java.util.ArrayList<TermVariable> CUP$list$param = (java.util.ArrayList<TermVariable>) param$.value;
              TermVariable[] param = CUP$list$param.toArray(new TermVariable[CUP$list$param.size()]);
              com.github.jhoenicke.javacup.runtime.Symbol fun$ = CUP$stack.get(CUP$size - 6);
              String fun = (String) fun$.value;
 localVars.endScope();
               if (hasError())
            	   parser.env.printError(getError());
               else {
                   try {
                   	parser.env.getScript().defineFun(fun, param, resultSort, value);
                   	parser.env.printSuccess();
                   } catch (SMTLIBException se) {
                   		parser.report_error(se.getMessage(), fun$);
                   		parser.env.printError(getError());
                   }
               }
            
              return parser.getSymbolFactory().newSymbol("command", 39, CUP$stack.get(CUP$size - 8), value$);
            }

          // NT$4 ::= 
          case 61:
            {
 localVars.beginScope(); 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("NT$4", 68, CUP$sym, CUP$sym);
            }

          // command ::= PUSH NUMERAL 
          case 62:
            {
              com.github.jhoenicke.javacup.runtime.Symbol n$ = CUP$stack.get(CUP$size - 1);
              BigInteger n = (BigInteger) n$.value;
 if (n.bitLength() >= 32)  {
            	   parser.report_error("too many push levels", n$);
            	   parser.env.printError(getError());
               } else {
               	   try {
                      parser.env.getScript().push(n.intValue());
                      parser.env.printSuccess();
                   } catch (SMTLIBException se) {
                   		parser.report_error(se.getMessage(), n$);
                   		parser.env.printError(getError());
                   }
               } 
              return parser.getSymbolFactory().newSymbol("command", 39, CUP$stack.get(CUP$size - 2), n$);
            }

          // command ::= POP NUMERAL 
          case 63:
            {
              com.github.jhoenicke.javacup.runtime.Symbol n$ = CUP$stack.get(CUP$size - 1);
              BigInteger n = (BigInteger) n$.value;
 if (n.bitLength() >= 32) {
            	   parser.report_error("too many pop levels", n$);
            	   parser.env.printError(getError());
               } else {
               	try {
                   parser.env.getScript().pop(n.intValue());
                   parser.env.printSuccess();
                } catch (SMTLIBException se) {
                   		parser.report_error(se.getMessage(), n$);
                   		parser.env.printError(getError());
                }
               } 
              return parser.getSymbolFactory().newSymbol("command", 39, CUP$stack.get(CUP$size - 2), n$);
            }

          // command ::= PUSH 
          case 64:
            {
 try {
            	parser.env.getScript().push(1);
            	parser.env.printSuccess();
               } catch (SMTLIBException se) {
               	parser.env.printError(se.getMessage());
               } 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("command", 39, CUP$sym, CUP$sym);
            }

          // command ::= POP 
          case 65:
            {
 try {
            	parser.env.getScript().pop(1);
            	parser.env.printSuccess();
            } catch (SMTLIBException se) {
            	parser.env.printError(se.getMessage());
            }  
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("command", 39, CUP$sym, CUP$sym);
            }

          // command ::= ASSERT term 
          case 66:
            {
              com.github.jhoenicke.javacup.runtime.Symbol t$ = CUP$stack.get(CUP$size - 1);
              Term t = (Term) t$.value;
 if (hasError())
                   parser.env.printError(getError());
               else {
               	try {
                   parser.env.getScript().assertTerm(t);
                   parser.env.printSuccess();
                 } catch (SMTLIBException se) {
                 	parser.report_error(se.getMessage());
                 	parser.env.printError(getError());
                 }
               }
            
              return parser.getSymbolFactory().newSymbol("command", 39, CUP$stack.get(CUP$size - 2), t$);
            }

          // command ::= CHECKSAT 
          case 67:
            {
 try {
            	Script.LBool res = parser.env.getScript().checkSat();
            	parser.env.printResponse(res);
            } catch(SMTLIBException se) {
            	parser.env.printError(se.getMessage());
            } 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("command", 39, CUP$sym, CUP$sym);
            }

          // command ::= CHECKSATASSUMING LPAR term* RPAR 
          case 68:
            {
              com.github.jhoenicke.javacup.runtime.Symbol t$ = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<Term> CUP$list$t = (java.util.ArrayList<Term>) t$.value;
              Term[] t = CUP$list$t.toArray(new Term[CUP$list$t.size()]);
 try {
                Script.LBool res = parser.env.getScript().checkSatAssuming(t);
                parser.env.printResponse(res);
            } catch(SMTLIBException se) {
            	parser.env.printError(se.getMessage());
            } 
              return parser.getSymbolFactory().newSymbol("command", 39, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // command ::= GETASSERTIONS 
          case 69:
            {
 try {
            	Term[] res = parser.env.getScript().getAssertions();
            	parser.env.printTermResponse(res);
            } catch (SMTLIBException se) {
            	parser.env.printError(se.getMessage());
            } 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("command", 39, CUP$sym, CUP$sym);
            }

          // command ::= GETINTERPOLANTS interpolantpartition 
          case 70:
            {
              com.github.jhoenicke.javacup.runtime.Symbol ips$ = CUP$stack.get(CUP$size - 1);
              InterpolationInfo ips = (InterpolationInfo) ips$.value;
 if (!ips.isClosedTree())
                   parser.report_error("Interpolation tree malformed", ips$);
               if (hasError())
            	   parser.env.printError(getError());
               else {
               	try {
                   Term[] partition = ips.getPartition();
                   int[] startOfSubtree = ips.getTreeStructure();
                   Term[] res = parser.env.getScript()
                       .getInterpolants(partition, startOfSubtree);
                   parser.env.printResponse(res);
                } catch (SMTLIBException se) {
                	parser.env.printError(se.getMessage());
                } catch (UnsupportedOperationException ignored) {
            	    parser.env.printResponse("unsupported");
                }
               } 
              return parser.getSymbolFactory().newSymbol("command", 39, CUP$stack.get(CUP$size - 2), ips$);
            }

          // command ::= GETPROOF 
          case 71:
            {
 try {
            	Term proof = parser.env.getScript().getProof();
            	parser.env.printResponse(proof);
            } catch (SMTLIBException se) {
            	parser.env.printError(se.getMessage());
            } 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("command", 39, CUP$sym, CUP$sym);
            }

          // command ::= GETUNSATCORE 
          case 72:
            {
 try {
            	Term[] res = parser.env.getScript().getUnsatCore();
            	parser.env.printResponse(res);
            } catch (SMTLIBException se) {
            	parser.env.printError(se.getMessage());
            } catch (UnsupportedOperationException uoe) {
            	parser.env.printResponse("unsupported");
            } 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("command", 39, CUP$sym, CUP$sym);
            }

          // command ::= GETUNSATASSUMPTIONS 
          case 73:
            {
 try {
            	Term[] res = parser.env.getScript().getUnsatAssumptions();
            	parser.env.printResponse(res);
            } catch (SMTLIBException se) {
            	parser.env.printError(se.getMessage());
            } catch (UnsupportedOperationException uoe) {
            	parser.env.printResponse("unsupported");
            } 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("command", 39, CUP$sym, CUP$sym);
            }

          // command ::= GETMODEL 
          case 74:
            {
 try {
                Model model = parser.env.getScript().getModel();
                parser.env.printResponse(model);
            } catch (SMTLIBException se) {
            	parser.env.printError(se.getMessage());
            } catch (UnsupportedOperationException uoe) {
            	parser.env.printResponse("unsupported");
            } 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("command", 39, CUP$sym, CUP$sym);
            }

          // command ::= GETVALUE LPAR term+ RPAR 
          case 75:
            {
              com.github.jhoenicke.javacup.runtime.Symbol t$ = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<Term> CUP$list$t = (java.util.ArrayList<Term>) t$.value;
              Term[] t = CUP$list$t.toArray(new Term[CUP$list$t.size()]);
 if (hasError())
            	   parser.env.printError(getError());
               else {
               	try {
                   Map<Term, Term> val = parser.env.getScript().getValue(t);
                   parser.env.printValues(val);
                } catch (SMTLIBException se) {
                	parser.env.printError(se.getMessage());
                }
               } 
              return parser.getSymbolFactory().newSymbol("command", 39, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // command ::= GETASSIGNMENT 
          case 76:
            {
 try {
            	Assignments ass = parser.env.getScript().getAssignment();
            	parser.env.printResponse(ass);
            } catch (SMTLIBException se) {
            	parser.env.printError(se.getMessage());
            } 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("command", 39, CUP$sym, CUP$sym);
            }

          // command ::= GETOPTION keyword 
          case 77:
            {
              com.github.jhoenicke.javacup.runtime.Symbol opt$ = CUP$stack.get(CUP$size - 1);
              String opt = (String) opt$.value;
 try {
            	parser.env.printResponse(parser.env.getScript().getOption(opt));
            } catch (UnsupportedOperationException ignored) {
            	parser.env.printResponse("unsupported");
            } 
              return parser.getSymbolFactory().newSymbol("command", 39, CUP$stack.get(CUP$size - 2), opt$);
            }

          // command ::= GETINFO infoFlag 
          case 78:
            {
              com.github.jhoenicke.javacup.runtime.Symbol info$ = CUP$stack.get(CUP$size - 1);
              String info = (String) info$.value;
 try {
            	parser.env.printInfoResponse(info, parser.env.getInfo(info));
            } catch (UnsupportedOperationException ignored) {
            	parser.env.printResponse("unsupported");
            } catch (SMTLIBException se) {
            	parser.env.printError(se.getMessage());
            } 
              return parser.getSymbolFactory().newSymbol("command", 39, CUP$stack.get(CUP$size - 2), info$);
            }

          // command ::= INCLUDE STRING 
          case 79:
            {
              com.github.jhoenicke.javacup.runtime.Symbol file$ = CUP$stack.get(CUP$size - 1);
              String file = (String) file$.value;
 try {
          		parser.env.include(file);
          		parser.env.printSuccess();
          	} catch (SMTLIBException se) {
          		parser.env.printError(se.getMessage());
          	}
              return parser.getSymbolFactory().newSymbol("command", 39, CUP$stack.get(CUP$size - 2), file$);
            }

          // command ::= SIMPLIFY term 
          case 80:
            {
              com.github.jhoenicke.javacup.runtime.Symbol t$ = CUP$stack.get(CUP$size - 1);
              Term t = (Term) t$.value;
 if (hasError())
            	   parser.env.printError(getError());
               else
                   parser.env.printResponse(parser.env.getScript().simplify(t));
            
              return parser.getSymbolFactory().newSymbol("command", 39, CUP$stack.get(CUP$size - 2), t$);
            }

          // command ::= RESET 
          case 81:
            {
 parser.env.getScript().reset(); parser.env.printSuccess(); 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("command", 39, CUP$sym, CUP$sym);
            }

          // command ::= RESETASSERTIONS 
          case 82:
            {
 parser.env.getScript().resetAssertions(); parser.env.printSuccess(); 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("command", 39, CUP$sym, CUP$sym);
            }

          // command ::= EXIT 
          case 83:
            {
 parser.env.getScript().exit(); parser.done_parsing(); 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("command", 39, CUP$sym, CUP$sym);
            }

          // command ::= TIMED NT$5 commandPar* 
          case 84:
            {
 parser.env.endTiming(); 
              return parser.getSymbolFactory().newSymbol("command", 39, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // NT$5 ::= 
          case 85:
            {
 parser.env.startTiming(); 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("NT$5", 71, CUP$sym, CUP$sym);
            }

          // command ::= ALLSAT LPAR term+ RPAR 
          case 86:
            {
              com.github.jhoenicke.javacup.runtime.Symbol p$ = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<Term> CUP$list$p = (java.util.ArrayList<Term>) p$.value;
              Term[] p = CUP$list$p.toArray(new Term[CUP$list$p.size()]);
 if (hasError())
            	  parser.env.printError(getError());
              else {
                try {
          			parser.env.printResponse(parser.env.getScript().checkAllsat(p));
          	   	} catch (SMTLIBException se) {
          	   		parser.env.printError(se.getMessage());
          	   	}
          	  }
          	 
              return parser.getSymbolFactory().newSymbol("command", 39, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // command ::= ECHO STRING 
          case 87:
            {
              com.github.jhoenicke.javacup.runtime.Symbol msg$ = CUP$stack.get(CUP$size - 1);
              String msg = (String) msg$.value;
 parser.env.printResponse(parser.env.getScript().echo(new QuotedObject(msg))); 
              return parser.getSymbolFactory().newSymbol("command", 39, CUP$stack.get(CUP$size - 2), msg$);
            }

          // command ::= FINDIMPLIEDEQUALITY LPAR term+ RPAR LPAR term+ RPAR 
          case 88:
            {
              com.github.jhoenicke.javacup.runtime.Symbol y$ = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<Term> CUP$list$y = (java.util.ArrayList<Term>) y$.value;
              Term[] y = CUP$list$y.toArray(new Term[CUP$list$y.size()]);
              com.github.jhoenicke.javacup.runtime.Symbol x$ = CUP$stack.get(CUP$size - 5);
              java.util.ArrayList<Term> CUP$list$x = (java.util.ArrayList<Term>) x$.value;
              Term[] x = CUP$list$x.toArray(new Term[CUP$list$x.size()]);
 if (hasError())
            	  parser.env.printError(getError());
              else {
                try {
          			parser.env.printResponse(parser.env.getScript().findImpliedEquality(x, y));
          	   	} catch (SMTLIBException se) {
          	   		parser.env.printError(se.getMessage());
          	   	}
          	  }
          	 
              return parser.getSymbolFactory().newSymbol("command", 39, CUP$stack.get(CUP$size - 7), CUP$stack.get(CUP$size - 1));
            }

          // commandPar ::= LPAR command RPAR 
          case 89:
            {
              return parser.getSymbolFactory().newSymbol("commandPar", 40, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // NUMERAL+ ::= NUMERAL 
          case 90:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$0 = CUP$stack.get(CUP$size - 1);
              java.util.ArrayList<BigInteger> RESULT = new java.util.ArrayList<BigInteger>();
              RESULT.add((BigInteger) CUP$0.value);
              return parser.getSymbolFactory().newSymbol("NUMERAL+", 47, CUP$0, CUP$0, RESULT);
            }

          // NUMERAL+ ::= NUMERAL+ NUMERAL 
          case 91:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$1 = CUP$stack.get(CUP$size - 1);
              com.github.jhoenicke.javacup.runtime.Symbol CUP$0 = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<BigInteger> RESULT = (java.util.ArrayList<BigInteger>) CUP$0.value;
              RESULT.add((BigInteger) CUP$1.value);
              return parser.getSymbolFactory().newSymbol("NUMERAL+", 47, CUP$0, CUP$1, RESULT);
            }

          // symbol* ::= 
          case 92:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("symbol*", 64, CUP$sym, CUP$sym, new java.util.ArrayList<String>());
            }

          // symbol+ ::= symbol 
          case 93:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$0 = CUP$stack.get(CUP$size - 1);
              java.util.ArrayList<String> RESULT = new java.util.ArrayList<String>();
              RESULT.add((String) CUP$0.value);
              return parser.getSymbolFactory().newSymbol("symbol+", 59, CUP$0, CUP$0, RESULT);
            }

          // symbol+ ::= symbol+ symbol 
          case 94:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$1 = CUP$stack.get(CUP$size - 1);
              com.github.jhoenicke.javacup.runtime.Symbol CUP$0 = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<String> RESULT = (java.util.ArrayList<String>) CUP$0.value;
              RESULT.add((String) CUP$1.value);
              return parser.getSymbolFactory().newSymbol("symbol+", 59, CUP$0, CUP$1, RESULT);
            }

          // sExpr* ::= 
          case 95:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("sExpr*", 46, CUP$sym, CUP$sym, new java.util.ArrayList<Object>());
            }

          // sExpr+ ::= sExpr 
          case 96:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$0 = CUP$stack.get(CUP$size - 1);
              java.util.ArrayList<Object> RESULT = new java.util.ArrayList<Object>();
              RESULT.add((Object) CUP$0.value);
              return parser.getSymbolFactory().newSymbol("sExpr+", 45, CUP$0, CUP$0, RESULT);
            }

          // sExpr+ ::= sExpr+ sExpr 
          case 97:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$1 = CUP$stack.get(CUP$size - 1);
              com.github.jhoenicke.javacup.runtime.Symbol CUP$0 = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<Object> RESULT = (java.util.ArrayList<Object>) CUP$0.value;
              RESULT.add((Object) CUP$1.value);
              return parser.getSymbolFactory().newSymbol("sExpr+", 45, CUP$0, CUP$1, RESULT);
            }

          // sort* ::= 
          case 98:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("sort*", 66, CUP$sym, CUP$sym, new java.util.ArrayList<Sort>());
            }

          // sort+ ::= sort 
          case 99:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$0 = CUP$stack.get(CUP$size - 1);
              java.util.ArrayList<Sort> RESULT = new java.util.ArrayList<Sort>();
              RESULT.add((Sort) CUP$0.value);
              return parser.getSymbolFactory().newSymbol("sort+", 48, CUP$0, CUP$0, RESULT);
            }

          // sort+ ::= sort+ sort 
          case 100:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$1 = CUP$stack.get(CUP$size - 1);
              com.github.jhoenicke.javacup.runtime.Symbol CUP$0 = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<Sort> RESULT = (java.util.ArrayList<Sort>) CUP$0.value;
              RESULT.add((Sort) CUP$1.value);
              return parser.getSymbolFactory().newSymbol("sort+", 48, CUP$0, CUP$1, RESULT);
            }

          // attributeValue? ::= 
          case 101:
            {
              Object RESULT;
RESULT=null;
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("attributeValue?", 49, CUP$sym, CUP$sym, RESULT);
            }

          // attribute* ::= 
          case 102:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("attribute*", 58, CUP$sym, CUP$sym, new java.util.ArrayList<Annotation>());
            }

          // attribute+ ::= attribute 
          case 103:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$0 = CUP$stack.get(CUP$size - 1);
              java.util.ArrayList<Annotation> RESULT = new java.util.ArrayList<Annotation>();
              RESULT.add((Annotation) CUP$0.value);
              return parser.getSymbolFactory().newSymbol("attribute+", 57, CUP$0, CUP$0, RESULT);
            }

          // attribute+ ::= attribute+ attribute 
          case 104:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$1 = CUP$stack.get(CUP$size - 1);
              com.github.jhoenicke.javacup.runtime.Symbol CUP$0 = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<Annotation> RESULT = (java.util.ArrayList<Annotation>) CUP$0.value;
              RESULT.add((Annotation) CUP$1.value);
              return parser.getSymbolFactory().newSymbol("attribute+", 57, CUP$0, CUP$1, RESULT);
            }

          // varBinding+ ::= varBinding 
          case 105:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$0 = CUP$stack.get(CUP$size - 1);
              java.util.ArrayList<Binding> RESULT = new java.util.ArrayList<Binding>();
              RESULT.add((Binding) CUP$0.value);
              return parser.getSymbolFactory().newSymbol("varBinding+", 52, CUP$0, CUP$0, RESULT);
            }

          // varBinding+ ::= varBinding+ varBinding 
          case 106:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$1 = CUP$stack.get(CUP$size - 1);
              com.github.jhoenicke.javacup.runtime.Symbol CUP$0 = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<Binding> RESULT = (java.util.ArrayList<Binding>) CUP$0.value;
              RESULT.add((Binding) CUP$1.value);
              return parser.getSymbolFactory().newSymbol("varBinding+", 52, CUP$0, CUP$1, RESULT);
            }

          // sortedVar* ::= 
          case 107:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("sortedVar*", 67, CUP$sym, CUP$sym, new java.util.ArrayList<TermVariable>());
            }

          // sortedVar+ ::= sortedVar 
          case 108:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$0 = CUP$stack.get(CUP$size - 1);
              java.util.ArrayList<TermVariable> RESULT = new java.util.ArrayList<TermVariable>();
              RESULT.add((TermVariable) CUP$0.value);
              return parser.getSymbolFactory().newSymbol("sortedVar+", 54, CUP$0, CUP$0, RESULT);
            }

          // sortedVar+ ::= sortedVar+ sortedVar 
          case 109:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$1 = CUP$stack.get(CUP$size - 1);
              com.github.jhoenicke.javacup.runtime.Symbol CUP$0 = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<TermVariable> RESULT = (java.util.ArrayList<TermVariable>) CUP$0.value;
              RESULT.add((TermVariable) CUP$1.value);
              return parser.getSymbolFactory().newSymbol("sortedVar+", 54, CUP$0, CUP$1, RESULT);
            }

          // term* ::= 
          case 110:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("term*", 51, CUP$sym, CUP$sym, new java.util.ArrayList<Term>());
            }

          // term+ ::= term 
          case 111:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$0 = CUP$stack.get(CUP$size - 1);
              java.util.ArrayList<Term> RESULT = new java.util.ArrayList<Term>();
              RESULT.add((Term) CUP$0.value);
              return parser.getSymbolFactory().newSymbol("term+", 50, CUP$0, CUP$0, RESULT);
            }

          // term+ ::= term+ term 
          case 112:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$1 = CUP$stack.get(CUP$size - 1);
              com.github.jhoenicke.javacup.runtime.Symbol CUP$0 = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<Term> RESULT = (java.util.ArrayList<Term>) CUP$0.value;
              RESULT.add((Term) CUP$1.value);
              return parser.getSymbolFactory().newSymbol("term+", 50, CUP$0, CUP$1, RESULT);
            }

          // sortSymbolDecl+ ::= sortSymbolDecl+ sortSymbolDecl 
          case 113:
            {
              return parser.getSymbolFactory().newSymbol("sortSymbolDecl+", 60, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // parFunSymbolDecl+ ::= parFunSymbolDecl+ parFunSymbolDecl 
          case 114:
            {
              return parser.getSymbolFactory().newSymbol("parFunSymbolDecl+", 61, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // theoryAttribute+ ::= theoryAttribute+ theoryAttribute 
          case 115:
            {
              return parser.getSymbolFactory().newSymbol("theoryAttribute+", 62, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // logicAttribute+ ::= logicAttribute+ logicAttribute 
          case 116:
            {
              return parser.getSymbolFactory().newSymbol("logicAttribute+", 63, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // commandPar* ::= 
          case 117:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("commandPar*", 70, CUP$sym, CUP$sym);
            }

          // commandPar+ ::= commandPar+ commandPar 
          case 118:
            {
              return parser.getSymbolFactory().newSymbol("commandPar+", 69, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          /* . . . . . .*/
          default:
            throw new InternalError(
               "Invalid action number found in internal parse table");

        }
    }
}

}
